
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000358e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f8  00800060  0000358e  00003622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800158  00800158  0000371a  2**0
                  ALLOC
  3 .stab         00002cdc  00000000  00000000  0000371c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ff6  00000000  00000000  000063f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000073ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000754e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000076dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009722  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a823  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b7a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b928  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000bbea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__vector_3>
      10:	0c 94 81 17 	jmp	0x2f02	; 0x2f02 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__vector_8>
      24:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 35       	cpi	r26, 0x58	; 88
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e5       	ldi	r26, 0x58	; 88
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 36       	cpi	r26, 0x65	; 101
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 49 1a 	jmp	0x3492	; 0x3492 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e4       	ldi	r26, 0x45	; 69
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 49 1a 	jmp	0x3492	; 0x3492 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 e4       	ldi	r24, 0x45	; 69
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e4       	ldi	r22, 0x45	; 69
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
void TimerCallBack(void);
void ActivateAlarm(void);


void main(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <main+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	uint8 status,key,permission;
	UART_init();
     caa:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <UART_init>
	LCD_init();
     cae:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_init>
	/* Enable Global Interrupt */
	SET_BIT(SREG,7);
     cb2:	af e5       	ldi	r26, 0x5F	; 95
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	ef e5       	ldi	r30, 0x5F	; 95
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	80 68       	ori	r24, 0x80	; 128
     cbe:	8c 93       	st	X, r24
	/* Receive existence of password in External EEPROM from Control ECU */
	status=UART_receiveByte();
     cc0:	0e 94 b6 19 	call	0x336c	; 0x336c <UART_receiveByte>
     cc4:	8b 83       	std	Y+3, r24	; 0x03
	if(status==NO_PASSWORD)
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	11 f4       	brne	.+4      	; 0xcd0 <main+0x32>
	{
		ChangePassword();
     ccc:	0e 94 92 07 	call	0xf24	; 0xf24 <ChangePassword>
	}
	while(1)
	{
		DisplayHomeScreen();
     cd0:	0e 94 dd 08 	call	0x11ba	; 0x11ba <DisplayHomeScreen>
		key=KeyPad_getPressedKey();
     cd4:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <KeyPad_getPressedKey>
     cd8:	8a 83       	std	Y+2, r24	; 0x02
		if(key=='+')
     cda:	8a 81       	ldd	r24, Y+2	; 0x02
     cdc:	8b 32       	cpi	r24, 0x2B	; 43
     cde:	91 f4       	brne	.+36     	; 0xd04 <main+0x66>
		{
			UART_sendByte(UNLOCK_ORDER);
     ce0:	85 e0       	ldi	r24, 0x05	; 5
     ce2:	0e 94 9f 19 	call	0x333e	; 0x333e <UART_sendByte>
			permission=VerifyPassword();
     ce6:	0e 94 06 09 	call	0x120c	; 0x120c <VerifyPassword>
     cea:	89 83       	std	Y+1, r24	; 0x01
			if(permission==SUCCESS)
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	19 f4       	brne	.+6      	; 0xcf8 <main+0x5a>
			{
				UnlockDoor();
     cf2:	0e 94 cb 09 	call	0x1396	; 0x1396 <UnlockDoor>
     cf6:	ec cf       	rjmp	.-40     	; 0xcd0 <main+0x32>
			}
			else if (permission==ERROR)
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	88 23       	and	r24, r24
     cfc:	49 f7       	brne	.-46     	; 0xcd0 <main+0x32>
			{
				ActivateAlarm();
     cfe:	0e 94 24 0c 	call	0x1848	; 0x1848 <ActivateAlarm>
     d02:	e6 cf       	rjmp	.-52     	; 0xcd0 <main+0x32>
			}

		}
		else if(key=='-')
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	8d 32       	cpi	r24, 0x2D	; 45
     d08:	19 f7       	brne	.-58     	; 0xcd0 <main+0x32>
		{
			UART_sendByte(CHANGE_PASSWORD);
     d0a:	86 e0       	ldi	r24, 0x06	; 6
     d0c:	0e 94 9f 19 	call	0x333e	; 0x333e <UART_sendByte>
			permission=VerifyPassword();
     d10:	0e 94 06 09 	call	0x120c	; 0x120c <VerifyPassword>
     d14:	89 83       	std	Y+1, r24	; 0x01
			if(permission==SUCCESS)
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	19 f4       	brne	.+6      	; 0xd22 <main+0x84>
			{
				ChangePassword();
     d1c:	0e 94 92 07 	call	0xf24	; 0xf24 <ChangePassword>
     d20:	d7 cf       	rjmp	.-82     	; 0xcd0 <main+0x32>
			}
			else if (permission==ERROR)
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	88 23       	and	r24, r24
     d26:	a1 f6       	brne	.-88     	; 0xcd0 <main+0x32>
			{
				ActivateAlarm();
     d28:	0e 94 24 0c 	call	0x1848	; 0x1848 <ActivateAlarm>
     d2c:	d1 cf       	rjmp	.-94     	; 0xcd0 <main+0x32>

00000d2e <GetPassword>:
	}
}


void GetPassword(void)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	60 97       	sbiw	r28, 0x10	; 16
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	sint8 i=0;
     d42:	1f 86       	std	Y+15, r1	; 0x0f
	g_tempPassword=0;  /* clear tempPassword to store a new one */
     d44:	10 92 58 01 	sts	0x0158, r1
     d48:	10 92 59 01 	sts	0x0159, r1
     d4c:	10 92 5a 01 	sts	0x015A, r1
     d50:	10 92 5b 01 	sts	0x015B, r1
	LCD_goToRowColumn(1,0);  /* got to the second row   */
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <LCD_goToRowColumn>
	/* max number is 9 numbers
	 * exit the function if the user entered 9 numbers
	 * or pressed ON key 13
	 */
	for(i=0;i<9;i++)
     d5c:	1f 86       	std	Y+15, r1	; 0x0f
     d5e:	ab c0       	rjmp	.+342    	; 0xeb6 <GetPassword+0x188>
	{
		key=KeyPad_getPressedKey();
     d60:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <KeyPad_getPressedKey>
     d64:	88 8b       	std	Y+16, r24	; 0x10
		if((key>=0) && (key<=9))
     d66:	88 89       	ldd	r24, Y+16	; 0x10
     d68:	8a 30       	cpi	r24, 0x0A	; 10
     d6a:	38 f5       	brcc	.+78     	; 0xdba <GetPassword+0x8c>
		{
			/* store password as an integer number */
			g_tempPassword = (g_tempPassword * 10)+key;
     d6c:	80 91 58 01 	lds	r24, 0x0158
     d70:	90 91 59 01 	lds	r25, 0x0159
     d74:	a0 91 5a 01 	lds	r26, 0x015A
     d78:	b0 91 5b 01 	lds	r27, 0x015B
     d7c:	2a e0       	ldi	r18, 0x0A	; 10
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	bc 01       	movw	r22, r24
     d86:	cd 01       	movw	r24, r26
     d88:	0e 94 2a 1a 	call	0x3454	; 0x3454 <__mulsi3>
     d8c:	9b 01       	movw	r18, r22
     d8e:	ac 01       	movw	r20, r24
     d90:	88 89       	ldd	r24, Y+16	; 0x10
     d92:	88 2f       	mov	r24, r24
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a0 e0       	ldi	r26, 0x00	; 0
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	82 0f       	add	r24, r18
     d9c:	93 1f       	adc	r25, r19
     d9e:	a4 1f       	adc	r26, r20
     da0:	b5 1f       	adc	r27, r21
     da2:	80 93 58 01 	sts	0x0158, r24
     da6:	90 93 59 01 	sts	0x0159, r25
     daa:	a0 93 5a 01 	sts	0x015A, r26
     dae:	b0 93 5b 01 	sts	0x015B, r27
			/* display '*' on screen  */
			LCD_displayCharacter('*');
     db2:	8a e2       	ldi	r24, 0x2A	; 42
     db4:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_displayCharacter>
     db8:	09 c0       	rjmp	.+18     	; 0xdcc <GetPassword+0x9e>
		}
		else if(key==13)
     dba:	88 89       	ldd	r24, Y+16	; 0x10
     dbc:	8d 30       	cpi	r24, 0x0D	; 13
     dbe:	19 f4       	brne	.+6      	; 0xdc6 <GetPassword+0x98>
		{
			/* force for loop to exit if user pressed 13*/
			i=9;
     dc0:	89 e0       	ldi	r24, 0x09	; 9
     dc2:	8f 87       	std	Y+15, r24	; 0x0f
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <GetPassword+0x9e>
		{
			/*
			 * if user pressed any other key the function do not store it
			 * and i-- for keep the max entered numbers is 9
			 */
			i--;
     dc6:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc8:	81 50       	subi	r24, 0x01	; 1
     dca:	8f 87       	std	Y+15, r24	; 0x0f
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	aa ef       	ldi	r26, 0xFA	; 250
     dd2:	b3 e4       	ldi	r27, 0x43	; 67
     dd4:	8b 87       	std	Y+11, r24	; 0x0b
     dd6:	9c 87       	std	Y+12, r25	; 0x0c
     dd8:	ad 87       	std	Y+13, r26	; 0x0d
     dda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ddc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dde:	7c 85       	ldd	r23, Y+12	; 0x0c
     de0:	8d 85       	ldd	r24, Y+13	; 0x0d
     de2:	9e 85       	ldd	r25, Y+14	; 0x0e
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	4a ef       	ldi	r20, 0xFA	; 250
     dea:	54 e4       	ldi	r21, 0x44	; 68
     dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	8f 83       	std	Y+7, r24	; 0x07
     df6:	98 87       	std	Y+8, r25	; 0x08
     df8:	a9 87       	std	Y+9, r26	; 0x09
     dfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dfc:	6f 81       	ldd	r22, Y+7	; 0x07
     dfe:	78 85       	ldd	r23, Y+8	; 0x08
     e00:	89 85       	ldd	r24, Y+9	; 0x09
     e02:	9a 85       	ldd	r25, Y+10	; 0x0a
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e8       	ldi	r20, 0x80	; 128
     e0a:	5f e3       	ldi	r21, 0x3F	; 63
     e0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e10:	88 23       	and	r24, r24
     e12:	2c f4       	brge	.+10     	; 0xe1e <GetPassword+0xf0>
		__ticks = 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	9e 83       	std	Y+6, r25	; 0x06
     e1a:	8d 83       	std	Y+5, r24	; 0x05
     e1c:	3f c0       	rjmp	.+126    	; 0xe9c <GetPassword+0x16e>
	else if (__tmp > 65535)
     e1e:	6f 81       	ldd	r22, Y+7	; 0x07
     e20:	78 85       	ldd	r23, Y+8	; 0x08
     e22:	89 85       	ldd	r24, Y+9	; 0x09
     e24:	9a 85       	ldd	r25, Y+10	; 0x0a
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	3f ef       	ldi	r19, 0xFF	; 255
     e2a:	4f e7       	ldi	r20, 0x7F	; 127
     e2c:	57 e4       	ldi	r21, 0x47	; 71
     e2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e32:	18 16       	cp	r1, r24
     e34:	4c f5       	brge	.+82     	; 0xe88 <GetPassword+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e36:	6b 85       	ldd	r22, Y+11	; 0x0b
     e38:	7c 85       	ldd	r23, Y+12	; 0x0c
     e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e2       	ldi	r20, 0x20	; 32
     e44:	51 e4       	ldi	r21, 0x41	; 65
     e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	bc 01       	movw	r22, r24
     e50:	cd 01       	movw	r24, r26
     e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	9e 83       	std	Y+6, r25	; 0x06
     e5c:	8d 83       	std	Y+5, r24	; 0x05
     e5e:	0f c0       	rjmp	.+30     	; 0xe7e <GetPassword+0x150>
     e60:	88 ec       	ldi	r24, 0xC8	; 200
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	9c 83       	std	Y+4, r25	; 0x04
     e66:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	9c 81       	ldd	r25, Y+4	; 0x04
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	f1 f7       	brne	.-4      	; 0xe6c <GetPassword+0x13e>
     e70:	9c 83       	std	Y+4, r25	; 0x04
     e72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e74:	8d 81       	ldd	r24, Y+5	; 0x05
     e76:	9e 81       	ldd	r25, Y+6	; 0x06
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	9e 83       	std	Y+6, r25	; 0x06
     e7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	9e 81       	ldd	r25, Y+6	; 0x06
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	69 f7       	brne	.-38     	; 0xe60 <GetPassword+0x132>
     e86:	14 c0       	rjmp	.+40     	; 0xeb0 <GetPassword+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e88:	6f 81       	ldd	r22, Y+7	; 0x07
     e8a:	78 85       	ldd	r23, Y+8	; 0x08
     e8c:	89 85       	ldd	r24, Y+9	; 0x09
     e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
     e9c:	8d 81       	ldd	r24, Y+5	; 0x05
     e9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ea0:	9a 83       	std	Y+2, r25	; 0x02
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	9a 81       	ldd	r25, Y+2	; 0x02
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <GetPassword+0x17a>
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	89 83       	std	Y+1, r24	; 0x01
	LCD_goToRowColumn(1,0);  /* got to the second row   */
	/* max number is 9 numbers
	 * exit the function if the user entered 9 numbers
	 * or pressed ON key 13
	 */
	for(i=0;i<9;i++)
     eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	8f 87       	std	Y+15, r24	; 0x0f
     eb6:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb8:	89 30       	cpi	r24, 0x09	; 9
     eba:	0c f4       	brge	.+2      	; 0xebe <GetPassword+0x190>
     ebc:	51 cf       	rjmp	.-350    	; 0xd60 <GetPassword+0x32>
			 */
			i--;
		}
		_delay_ms(500);
	}
	LCD_displayStringRowColumn(1,0,"       ");
     ebe:	20 e6       	ldi	r18, 0x60	; 96
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	a9 01       	movw	r20, r18
     ec8:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <LCD_displayStringRowColumn>
}
     ecc:	60 96       	adiw	r28, 0x10	; 16
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <SendPassword>:

void SendPassword(void)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <SendPassword+0x6>
     ee4:	0f 92       	push	r0
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * function responsible for sending the password to Control ECU
	 */
	uint8 i=0;
     eea:	1b 82       	std	Y+3, r1	; 0x03
	uint8 *ptr=&g_tempPassword;    /*a pointer to first byte of password */
     eec:	88 e5       	ldi	r24, 0x58	; 88
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	9a 83       	std	Y+2, r25	; 0x02
     ef2:	89 83       	std	Y+1, r24	; 0x01
	for(i=0;i<4;i++)
     ef4:	1b 82       	std	Y+3, r1	; 0x03
     ef6:	0d c0       	rjmp	.+26     	; 0xf12 <SendPassword+0x34>
	{
		UART_sendByte(*ptr);
     ef8:	e9 81       	ldd	r30, Y+1	; 0x01
     efa:	fa 81       	ldd	r31, Y+2	; 0x02
     efc:	80 81       	ld	r24, Z
     efe:	0e 94 9f 19 	call	0x333e	; 0x333e <UART_sendByte>
		/* move the pointer to next byte */
		ptr++;
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	9a 83       	std	Y+2, r25	; 0x02
     f0a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * function responsible for sending the password to Control ECU
	 */
	uint8 i=0;
	uint8 *ptr=&g_tempPassword;    /*a pointer to first byte of password */
	for(i=0;i<4;i++)
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	8f 5f       	subi	r24, 0xFF	; 255
     f10:	8b 83       	std	Y+3, r24	; 0x03
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	84 30       	cpi	r24, 0x04	; 4
     f16:	80 f3       	brcs	.-32     	; 0xef8 <SendPassword+0x1a>
	{
		UART_sendByte(*ptr);
		/* move the pointer to next byte */
		ptr++;
	}
}
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <ChangePassword>:

void ChangePassword(void)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	6d 97       	sbiw	r28, 0x1d	; 29
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
	uint8 status=0;
     f38:	1d 8e       	std	Y+29, r1	; 0x1d
	/* get first password from user and send it to Control ECU */
	LCD_clearScreen();
     f3a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter 1st pass");
     f3e:	28 e6       	ldi	r18, 0x68	; 104
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	a9 01       	movw	r20, r18
     f48:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <LCD_displayStringRowColumn>
	GetPassword();
     f4c:	0e 94 97 06 	call	0xd2e	; 0xd2e <GetPassword>
	SendPassword();
     f50:	0e 94 6f 07 	call	0xede	; 0xede <SendPassword>
	/* get second password from user and send it to Control ECU */
	LCD_clearScreen();
     f54:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter 2nd pass");
     f58:	27 e7       	ldi	r18, 0x77	; 119
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	a9 01       	movw	r20, r18
     f62:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <LCD_displayStringRowColumn>
	GetPassword();
     f66:	0e 94 97 06 	call	0xd2e	; 0xd2e <GetPassword>
	SendPassword();
     f6a:	0e 94 6f 07 	call	0xede	; 0xede <SendPassword>
	/* check the result of matching from Control ECU */
	status = UART_receiveByte();
     f6e:	0e 94 b6 19 	call	0x336c	; 0x336c <UART_receiveByte>
     f72:	8d 8f       	std	Y+29, r24	; 0x1d
     f74:	96 c0       	rjmp	.+300    	; 0x10a2 <ChangePassword+0x17e>
	while(status ==NOT_MATCHED)
	{
		/* if they unmatched display error on screen for 2 sec */
		LCD_displayStringRowColumn(0,0,"  NOT Matched");
     f76:	26 e8       	ldi	r18, 0x86	; 134
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	a9 01       	movw	r20, r18
     f80:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <LCD_displayStringRowColumn>
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	aa ef       	ldi	r26, 0xFA	; 250
     f8a:	b4 e4       	ldi	r27, 0x44	; 68
     f8c:	89 8f       	std	Y+25, r24	; 0x19
     f8e:	9a 8f       	std	Y+26, r25	; 0x1a
     f90:	ab 8f       	std	Y+27, r26	; 0x1b
     f92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f94:	69 8d       	ldd	r22, Y+25	; 0x19
     f96:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f98:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	4a ef       	ldi	r20, 0xFA	; 250
     fa2:	54 e4       	ldi	r21, 0x44	; 68
     fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	8d 8b       	std	Y+21, r24	; 0x15
     fae:	9e 8b       	std	Y+22, r25	; 0x16
     fb0:	af 8b       	std	Y+23, r26	; 0x17
     fb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fb4:	6d 89       	ldd	r22, Y+21	; 0x15
     fb6:	7e 89       	ldd	r23, Y+22	; 0x16
     fb8:	8f 89       	ldd	r24, Y+23	; 0x17
     fba:	98 8d       	ldd	r25, Y+24	; 0x18
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 e8       	ldi	r20, 0x80	; 128
     fc2:	5f e3       	ldi	r21, 0x3F	; 63
     fc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fc8:	88 23       	and	r24, r24
     fca:	2c f4       	brge	.+10     	; 0xfd6 <ChangePassword+0xb2>
		__ticks = 1;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9c 8b       	std	Y+20, r25	; 0x14
     fd2:	8b 8b       	std	Y+19, r24	; 0x13
     fd4:	3f c0       	rjmp	.+126    	; 0x1054 <ChangePassword+0x130>
	else if (__tmp > 65535)
     fd6:	6d 89       	ldd	r22, Y+21	; 0x15
     fd8:	7e 89       	ldd	r23, Y+22	; 0x16
     fda:	8f 89       	ldd	r24, Y+23	; 0x17
     fdc:	98 8d       	ldd	r25, Y+24	; 0x18
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	3f ef       	ldi	r19, 0xFF	; 255
     fe2:	4f e7       	ldi	r20, 0x7F	; 127
     fe4:	57 e4       	ldi	r21, 0x47	; 71
     fe6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fea:	18 16       	cp	r1, r24
     fec:	4c f5       	brge	.+82     	; 0x1040 <ChangePassword+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fee:	69 8d       	ldd	r22, Y+25	; 0x19
     ff0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ff2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	40 e2       	ldi	r20, 0x20	; 32
     ffc:	51 e4       	ldi	r21, 0x41	; 65
     ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	bc 01       	movw	r22, r24
    1008:	cd 01       	movw	r24, r26
    100a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	9c 8b       	std	Y+20, r25	; 0x14
    1014:	8b 8b       	std	Y+19, r24	; 0x13
    1016:	0f c0       	rjmp	.+30     	; 0x1036 <ChangePassword+0x112>
    1018:	88 ec       	ldi	r24, 0xC8	; 200
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9a 8b       	std	Y+18, r25	; 0x12
    101e:	89 8b       	std	Y+17, r24	; 0x11
    1020:	89 89       	ldd	r24, Y+17	; 0x11
    1022:	9a 89       	ldd	r25, Y+18	; 0x12
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <ChangePassword+0x100>
    1028:	9a 8b       	std	Y+18, r25	; 0x12
    102a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    102c:	8b 89       	ldd	r24, Y+19	; 0x13
    102e:	9c 89       	ldd	r25, Y+20	; 0x14
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	9c 8b       	std	Y+20, r25	; 0x14
    1034:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1036:	8b 89       	ldd	r24, Y+19	; 0x13
    1038:	9c 89       	ldd	r25, Y+20	; 0x14
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	69 f7       	brne	.-38     	; 0x1018 <ChangePassword+0xf4>
    103e:	14 c0       	rjmp	.+40     	; 0x1068 <ChangePassword+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1040:	6d 89       	ldd	r22, Y+21	; 0x15
    1042:	7e 89       	ldd	r23, Y+22	; 0x16
    1044:	8f 89       	ldd	r24, Y+23	; 0x17
    1046:	98 8d       	ldd	r25, Y+24	; 0x18
    1048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	9c 8b       	std	Y+20, r25	; 0x14
    1052:	8b 8b       	std	Y+19, r24	; 0x13
    1054:	8b 89       	ldd	r24, Y+19	; 0x13
    1056:	9c 89       	ldd	r25, Y+20	; 0x14
    1058:	98 8b       	std	Y+16, r25	; 0x10
    105a:	8f 87       	std	Y+15, r24	; 0x0f
    105c:	8f 85       	ldd	r24, Y+15	; 0x0f
    105e:	98 89       	ldd	r25, Y+16	; 0x10
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <ChangePassword+0x13c>
    1064:	98 8b       	std	Y+16, r25	; 0x10
    1066:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		/* do it again till the password is matched */
		LCD_clearScreen();
    1068:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Enter 1st pass");
    106c:	28 e6       	ldi	r18, 0x68	; 104
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	a9 01       	movw	r20, r18
    1076:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <LCD_displayStringRowColumn>
		GetPassword();
    107a:	0e 94 97 06 	call	0xd2e	; 0xd2e <GetPassword>
		SendPassword();
    107e:	0e 94 6f 07 	call	0xede	; 0xede <SendPassword>
		LCD_clearScreen();
    1082:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Enter 2nd pass");
    1086:	27 e7       	ldi	r18, 0x77	; 119
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	a9 01       	movw	r20, r18
    1090:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <LCD_displayStringRowColumn>
		GetPassword();
    1094:	0e 94 97 06 	call	0xd2e	; 0xd2e <GetPassword>
		SendPassword();
    1098:	0e 94 6f 07 	call	0xede	; 0xede <SendPassword>
		status = UART_receiveByte();
    109c:	0e 94 b6 19 	call	0x336c	; 0x336c <UART_receiveByte>
    10a0:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_displayStringRowColumn(0,0,"Enter 2nd pass");
	GetPassword();
	SendPassword();
	/* check the result of matching from Control ECU */
	status = UART_receiveByte();
	while(status ==NOT_MATCHED)
    10a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10a4:	83 30       	cpi	r24, 0x03	; 3
    10a6:	09 f4       	brne	.+2      	; 0x10aa <ChangePassword+0x186>
    10a8:	66 cf       	rjmp	.-308    	; 0xf76 <ChangePassword+0x52>
		LCD_displayStringRowColumn(0,0,"Enter 2nd pass");
		GetPassword();
		SendPassword();
		status = UART_receiveByte();
	}
	if(status == MATCHED)
    10aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <ChangePassword+0x18e>
    10b0:	7b c0       	rjmp	.+246    	; 0x11a8 <ChangePassword+0x284>
	{
		LCD_clearScreen();
    10b2:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"  Pass Changed");
    10b6:	24 e9       	ldi	r18, 0x94	; 148
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	a9 01       	movw	r20, r18
    10c0:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <LCD_displayStringRowColumn>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	aa ef       	ldi	r26, 0xFA	; 250
    10ca:	b4 e4       	ldi	r27, 0x44	; 68
    10cc:	8b 87       	std	Y+11, r24	; 0x0b
    10ce:	9c 87       	std	Y+12, r25	; 0x0c
    10d0:	ad 87       	std	Y+13, r26	; 0x0d
    10d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10da:	9e 85       	ldd	r25, Y+14	; 0x0e
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	4a ef       	ldi	r20, 0xFA	; 250
    10e2:	54 e4       	ldi	r21, 0x44	; 68
    10e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	8f 83       	std	Y+7, r24	; 0x07
    10ee:	98 87       	std	Y+8, r25	; 0x08
    10f0:	a9 87       	std	Y+9, r26	; 0x09
    10f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10f4:	6f 81       	ldd	r22, Y+7	; 0x07
    10f6:	78 85       	ldd	r23, Y+8	; 0x08
    10f8:	89 85       	ldd	r24, Y+9	; 0x09
    10fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e8       	ldi	r20, 0x80	; 128
    1102:	5f e3       	ldi	r21, 0x3F	; 63
    1104:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1108:	88 23       	and	r24, r24
    110a:	2c f4       	brge	.+10     	; 0x1116 <ChangePassword+0x1f2>
		__ticks = 1;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	9e 83       	std	Y+6, r25	; 0x06
    1112:	8d 83       	std	Y+5, r24	; 0x05
    1114:	3f c0       	rjmp	.+126    	; 0x1194 <ChangePassword+0x270>
	else if (__tmp > 65535)
    1116:	6f 81       	ldd	r22, Y+7	; 0x07
    1118:	78 85       	ldd	r23, Y+8	; 0x08
    111a:	89 85       	ldd	r24, Y+9	; 0x09
    111c:	9a 85       	ldd	r25, Y+10	; 0x0a
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	3f ef       	ldi	r19, 0xFF	; 255
    1122:	4f e7       	ldi	r20, 0x7F	; 127
    1124:	57 e4       	ldi	r21, 0x47	; 71
    1126:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    112a:	18 16       	cp	r1, r24
    112c:	4c f5       	brge	.+82     	; 0x1180 <ChangePassword+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    112e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1130:	7c 85       	ldd	r23, Y+12	; 0x0c
    1132:	8d 85       	ldd	r24, Y+13	; 0x0d
    1134:	9e 85       	ldd	r25, Y+14	; 0x0e
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e2       	ldi	r20, 0x20	; 32
    113c:	51 e4       	ldi	r21, 0x41	; 65
    113e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	bc 01       	movw	r22, r24
    1148:	cd 01       	movw	r24, r26
    114a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	9e 83       	std	Y+6, r25	; 0x06
    1154:	8d 83       	std	Y+5, r24	; 0x05
    1156:	0f c0       	rjmp	.+30     	; 0x1176 <ChangePassword+0x252>
    1158:	88 ec       	ldi	r24, 0xC8	; 200
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	9c 83       	std	Y+4, r25	; 0x04
    115e:	8b 83       	std	Y+3, r24	; 0x03
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	9c 81       	ldd	r25, Y+4	; 0x04
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <ChangePassword+0x240>
    1168:	9c 83       	std	Y+4, r25	; 0x04
    116a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116c:	8d 81       	ldd	r24, Y+5	; 0x05
    116e:	9e 81       	ldd	r25, Y+6	; 0x06
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	9e 83       	std	Y+6, r25	; 0x06
    1174:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1176:	8d 81       	ldd	r24, Y+5	; 0x05
    1178:	9e 81       	ldd	r25, Y+6	; 0x06
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	69 f7       	brne	.-38     	; 0x1158 <ChangePassword+0x234>
    117e:	14 c0       	rjmp	.+40     	; 0x11a8 <ChangePassword+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1180:	6f 81       	ldd	r22, Y+7	; 0x07
    1182:	78 85       	ldd	r23, Y+8	; 0x08
    1184:	89 85       	ldd	r24, Y+9	; 0x09
    1186:	9a 85       	ldd	r25, Y+10	; 0x0a
    1188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	8d 83       	std	Y+5, r24	; 0x05
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	9a 83       	std	Y+2, r25	; 0x02
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <ChangePassword+0x27c>
    11a4:	9a 83       	std	Y+2, r25	; 0x02
    11a6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
	}
}
    11a8:	6d 96       	adiw	r28, 0x1d	; 29
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <DisplayHomeScreen>:


void DisplayHomeScreen(void)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    11c2:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_clearScreen>
	LCD_displayString("    Welcome");
    11c6:	83 ea       	ldi	r24, 0xA3	; 163
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"(+):Unlock Door");
    11ce:	2f ea       	ldi	r18, 0xAF	; 175
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	a9 01       	movw	r20, r18
    11d8:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(2,0,"(-):Change Pass");
    11dc:	2f eb       	ldi	r18, 0xBF	; 191
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	a9 01       	movw	r20, r18
    11e6:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <LCD_displayStringRowColumn>
	/* The number of times that the Alarm has been activated */
	LCD_goToRowColumn(3,14);
    11ea:	83 e0       	ldi	r24, 0x03	; 3
    11ec:	6e e0       	ldi	r22, 0x0E	; 14
    11ee:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <LCD_goToRowColumn>
	LCD_displayInteger(g_AlarmCounter);
    11f2:	80 91 5e 01 	lds	r24, 0x015E
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a0 e0       	ldi	r26, 0x00	; 0
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 28 16 	call	0x2c50	; 0x2c50 <LCD_displayInteger>
}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <VerifyPassword>:

uint8 VerifyPassword(void)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	60 97       	sbiw	r28, 0x10	; 16
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
	uint8 status;
	LCD_clearScreen();
    1220:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Pls Enter pass");
    1224:	2f ec       	ldi	r18, 0xCF	; 207
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	a9 01       	movw	r20, r18
    122e:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <LCD_displayStringRowColumn>
	GetPassword();                                        /*get Password From User */
    1232:	0e 94 97 06 	call	0xd2e	; 0xd2e <GetPassword>
	SendPassword();
    1236:	0e 94 6f 07 	call	0xede	; 0xede <SendPassword>
	status=UART_receiveByte();                             /* receive status from control ECU */
    123a:	0e 94 b6 19 	call	0x336c	; 0x336c <UART_receiveByte>
    123e:	8f 87       	std	Y+15, r24	; 0x0f
    1240:	8e c0       	rjmp	.+284    	; 0x135e <VerifyPassword+0x152>
	while((status== NOT_MATCHED) && g_WrongAttemp<2)
	{
		g_WrongAttemp++;                   /* increment number of wrong tries */
    1242:	80 91 5c 01 	lds	r24, 0x015C
    1246:	8f 5f       	subi	r24, 0xFF	; 255
    1248:	80 93 5c 01 	sts	0x015C, r24
		 * if password was wrong get new one from user and send
		 * it to control ECU
		 * exit while loop if the password is correct or
		 * user try 3 wrong times
		 */
		LCD_clearScreen();
    124c:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Wrong Password  ");
    1250:	2e ed       	ldi	r18, 0xDE	; 222
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	a9 01       	movw	r20, r18
    125a:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <LCD_displayStringRowColumn>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	aa ef       	ldi	r26, 0xFA	; 250
    1264:	b4 e4       	ldi	r27, 0x44	; 68
    1266:	8b 87       	std	Y+11, r24	; 0x0b
    1268:	9c 87       	std	Y+12, r25	; 0x0c
    126a:	ad 87       	std	Y+13, r26	; 0x0d
    126c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1270:	7c 85       	ldd	r23, Y+12	; 0x0c
    1272:	8d 85       	ldd	r24, Y+13	; 0x0d
    1274:	9e 85       	ldd	r25, Y+14	; 0x0e
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	4a ef       	ldi	r20, 0xFA	; 250
    127c:	54 e4       	ldi	r21, 0x44	; 68
    127e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	8f 83       	std	Y+7, r24	; 0x07
    1288:	98 87       	std	Y+8, r25	; 0x08
    128a:	a9 87       	std	Y+9, r26	; 0x09
    128c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    128e:	6f 81       	ldd	r22, Y+7	; 0x07
    1290:	78 85       	ldd	r23, Y+8	; 0x08
    1292:	89 85       	ldd	r24, Y+9	; 0x09
    1294:	9a 85       	ldd	r25, Y+10	; 0x0a
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e8       	ldi	r20, 0x80	; 128
    129c:	5f e3       	ldi	r21, 0x3F	; 63
    129e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12a2:	88 23       	and	r24, r24
    12a4:	2c f4       	brge	.+10     	; 0x12b0 <VerifyPassword+0xa4>
		__ticks = 1;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
    12ae:	3f c0       	rjmp	.+126    	; 0x132e <VerifyPassword+0x122>
	else if (__tmp > 65535)
    12b0:	6f 81       	ldd	r22, Y+7	; 0x07
    12b2:	78 85       	ldd	r23, Y+8	; 0x08
    12b4:	89 85       	ldd	r24, Y+9	; 0x09
    12b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	3f ef       	ldi	r19, 0xFF	; 255
    12bc:	4f e7       	ldi	r20, 0x7F	; 127
    12be:	57 e4       	ldi	r21, 0x47	; 71
    12c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12c4:	18 16       	cp	r1, r24
    12c6:	4c f5       	brge	.+82     	; 0x131a <VerifyPassword+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    12cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e2       	ldi	r20, 0x20	; 32
    12d6:	51 e4       	ldi	r21, 0x41	; 65
    12d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	bc 01       	movw	r22, r24
    12e2:	cd 01       	movw	r24, r26
    12e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	9e 83       	std	Y+6, r25	; 0x06
    12ee:	8d 83       	std	Y+5, r24	; 0x05
    12f0:	0f c0       	rjmp	.+30     	; 0x1310 <VerifyPassword+0x104>
    12f2:	88 ec       	ldi	r24, 0xC8	; 200
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9c 83       	std	Y+4, r25	; 0x04
    12f8:	8b 83       	std	Y+3, r24	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <VerifyPassword+0xf2>
    1302:	9c 83       	std	Y+4, r25	; 0x04
    1304:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1306:	8d 81       	ldd	r24, Y+5	; 0x05
    1308:	9e 81       	ldd	r25, Y+6	; 0x06
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	9e 83       	std	Y+6, r25	; 0x06
    130e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1310:	8d 81       	ldd	r24, Y+5	; 0x05
    1312:	9e 81       	ldd	r25, Y+6	; 0x06
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	69 f7       	brne	.-38     	; 0x12f2 <VerifyPassword+0xe6>
    1318:	14 c0       	rjmp	.+40     	; 0x1342 <VerifyPassword+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131a:	6f 81       	ldd	r22, Y+7	; 0x07
    131c:	78 85       	ldd	r23, Y+8	; 0x08
    131e:	89 85       	ldd	r24, Y+9	; 0x09
    1320:	9a 85       	ldd	r25, Y+10	; 0x0a
    1322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	9e 83       	std	Y+6, r25	; 0x06
    132c:	8d 83       	std	Y+5, r24	; 0x05
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	9a 83       	std	Y+2, r25	; 0x02
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	9a 81       	ldd	r25, Y+2	; 0x02
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <VerifyPassword+0x12e>
    133e:	9a 83       	std	Y+2, r25	; 0x02
    1340:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		LCD_displayStringRowColumn(0,0,"Pls Enter pass  ");
    1342:	2f ee       	ldi	r18, 0xEF	; 239
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	a9 01       	movw	r20, r18
    134c:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <LCD_displayStringRowColumn>
		GetPassword();                                       /*get Password From User */
    1350:	0e 94 97 06 	call	0xd2e	; 0xd2e <GetPassword>
		SendPassword();
    1354:	0e 94 6f 07 	call	0xede	; 0xede <SendPassword>
		status=UART_receiveByte();
    1358:	0e 94 b6 19 	call	0x336c	; 0x336c <UART_receiveByte>
    135c:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Pls Enter pass");
	GetPassword();                                        /*get Password From User */
	SendPassword();
	status=UART_receiveByte();                             /* receive status from control ECU */
	while((status== NOT_MATCHED) && g_WrongAttemp<2)
    135e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1360:	83 30       	cpi	r24, 0x03	; 3
    1362:	29 f4       	brne	.+10     	; 0x136e <VerifyPassword+0x162>
    1364:	80 91 5c 01 	lds	r24, 0x015C
    1368:	82 30       	cpi	r24, 0x02	; 2
    136a:	08 f4       	brcc	.+2      	; 0x136e <VerifyPassword+0x162>
    136c:	6a cf       	rjmp	.-300    	; 0x1242 <VerifyPassword+0x36>
		LCD_displayStringRowColumn(0,0,"Pls Enter pass  ");
		GetPassword();                                       /*get Password From User */
		SendPassword();
		status=UART_receiveByte();
	}
	if(g_WrongAttemp<2)
    136e:	80 91 5c 01 	lds	r24, 0x015C
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	28 f4       	brcc	.+10     	; 0x1380 <VerifyPassword+0x174>
	{
		/*Clear Wrong Attempts Counter */
		g_WrongAttemp=0;
    1376:	10 92 5c 01 	sts	0x015C, r1
		/* return success password is correct */
		return SUCCESS;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	88 8b       	std	Y+16, r24	; 0x10
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <VerifyPassword+0x176>
	}
	else
	{
		/* return error password is incorrect */
		return ERROR;
    1380:	18 8a       	std	Y+16, r1	; 0x10
    1382:	88 89       	ldd	r24, Y+16	; 0x10
	}


}
    1384:	60 96       	adiw	r28, 0x10	; 16
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <UnlockDoor>:

void UnlockDoor(void)
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	c3 54       	subi	r28, 0x43	; 67
    13a0:	d0 40       	sbci	r29, 0x00	; 0
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
	uint8 flag=0;
    13ac:	19 ae       	std	Y+57, r1	; 0x39
	 * we need 15 second at 8Mhz CPU frequency and scaler 1024
	 * so we need 117187 cycle by timer
	 * timer 1 is 16 bit i.e 65536 cycle
	 * we need two compare at compare value 39062
	 */
	T_Config config={TIMER1,CTC,T_CLK_1024,39062};
    13ae:	ce 01       	movw	r24, r28
    13b0:	ca 96       	adiw	r24, 0x3a	; 58
    13b2:	21 96       	adiw	r28, 0x01	; 1
    13b4:	9f af       	std	Y+63, r25	; 0x3f
    13b6:	8e af       	std	Y+62, r24	; 0x3e
    13b8:	21 97       	sbiw	r28, 0x01	; 1
    13ba:	ed e4       	ldi	r30, 0x4D	; 77
    13bc:	f1 e0       	ldi	r31, 0x01	; 1
    13be:	23 96       	adiw	r28, 0x03	; 3
    13c0:	ff af       	std	Y+63, r31	; 0x3f
    13c2:	ee af       	std	Y+62, r30	; 0x3e
    13c4:	23 97       	sbiw	r28, 0x03	; 3
    13c6:	f5 e0       	ldi	r31, 0x05	; 5
    13c8:	24 96       	adiw	r28, 0x04	; 4
    13ca:	ff af       	std	Y+63, r31	; 0x3f
    13cc:	24 97       	sbiw	r28, 0x04	; 4
    13ce:	23 96       	adiw	r28, 0x03	; 3
    13d0:	ee ad       	ldd	r30, Y+62	; 0x3e
    13d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    13d4:	23 97       	sbiw	r28, 0x03	; 3
    13d6:	00 80       	ld	r0, Z
    13d8:	23 96       	adiw	r28, 0x03	; 3
    13da:	8e ad       	ldd	r24, Y+62	; 0x3e
    13dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    13de:	23 97       	sbiw	r28, 0x03	; 3
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	23 96       	adiw	r28, 0x03	; 3
    13e4:	9f af       	std	Y+63, r25	; 0x3f
    13e6:	8e af       	std	Y+62, r24	; 0x3e
    13e8:	23 97       	sbiw	r28, 0x03	; 3
    13ea:	21 96       	adiw	r28, 0x01	; 1
    13ec:	ee ad       	ldd	r30, Y+62	; 0x3e
    13ee:	ff ad       	ldd	r31, Y+63	; 0x3f
    13f0:	21 97       	sbiw	r28, 0x01	; 1
    13f2:	00 82       	st	Z, r0
    13f4:	21 96       	adiw	r28, 0x01	; 1
    13f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    13f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    13fa:	21 97       	sbiw	r28, 0x01	; 1
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	21 96       	adiw	r28, 0x01	; 1
    1400:	9f af       	std	Y+63, r25	; 0x3f
    1402:	8e af       	std	Y+62, r24	; 0x3e
    1404:	21 97       	sbiw	r28, 0x01	; 1
    1406:	24 96       	adiw	r28, 0x04	; 4
    1408:	9f ad       	ldd	r25, Y+63	; 0x3f
    140a:	24 97       	sbiw	r28, 0x04	; 4
    140c:	91 50       	subi	r25, 0x01	; 1
    140e:	24 96       	adiw	r28, 0x04	; 4
    1410:	9f af       	std	Y+63, r25	; 0x3f
    1412:	24 97       	sbiw	r28, 0x04	; 4
    1414:	24 96       	adiw	r28, 0x04	; 4
    1416:	ef ad       	ldd	r30, Y+63	; 0x3f
    1418:	24 97       	sbiw	r28, 0x04	; 4
    141a:	ee 23       	and	r30, r30
    141c:	c1 f6       	brne	.-80     	; 0x13ce <UnlockDoor+0x38>
	/* set call back function for timer 1 */
	TIMER_setCallBack(TIMER1,TimerCallBack);
    141e:	28 e1       	ldi	r18, 0x18	; 24
    1420:	3c e0       	ldi	r19, 0x0C	; 12
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	b9 01       	movw	r22, r18
    1426:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <TIMER_setCallBack>
	/* initialize timer  */
	TIMER_init(&config);
    142a:	ce 01       	movw	r24, r28
    142c:	ca 96       	adiw	r24, 0x3a	; 58
    142e:	0e 94 e7 17 	call	0x2fce	; 0x2fce <TIMER_init>
    1432:	ea c0       	rjmp	.+468    	; 0x1608 <UnlockDoor+0x272>
	/* display flashing unlocking on screen while motor is opening the lock */
	while(g_Tick<2)
	{
		LCD_clearScreen();
    1434:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_clearScreen>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	a6 e9       	ldi	r26, 0x96	; 150
    143e:	b3 e4       	ldi	r27, 0x43	; 67
    1440:	8d ab       	std	Y+53, r24	; 0x35
    1442:	9e ab       	std	Y+54, r25	; 0x36
    1444:	af ab       	std	Y+55, r26	; 0x37
    1446:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1448:	6d a9       	ldd	r22, Y+53	; 0x35
    144a:	7e a9       	ldd	r23, Y+54	; 0x36
    144c:	8f a9       	ldd	r24, Y+55	; 0x37
    144e:	98 ad       	ldd	r25, Y+56	; 0x38
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	4a ef       	ldi	r20, 0xFA	; 250
    1456:	54 e4       	ldi	r21, 0x44	; 68
    1458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	89 ab       	std	Y+49, r24	; 0x31
    1462:	9a ab       	std	Y+50, r25	; 0x32
    1464:	ab ab       	std	Y+51, r26	; 0x33
    1466:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1468:	69 a9       	ldd	r22, Y+49	; 0x31
    146a:	7a a9       	ldd	r23, Y+50	; 0x32
    146c:	8b a9       	ldd	r24, Y+51	; 0x33
    146e:	9c a9       	ldd	r25, Y+52	; 0x34
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e8       	ldi	r20, 0x80	; 128
    1476:	5f e3       	ldi	r21, 0x3F	; 63
    1478:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    147c:	88 23       	and	r24, r24
    147e:	2c f4       	brge	.+10     	; 0x148a <UnlockDoor+0xf4>
		__ticks = 1;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	98 ab       	std	Y+48, r25	; 0x30
    1486:	8f a7       	std	Y+47, r24	; 0x2f
    1488:	3f c0       	rjmp	.+126    	; 0x1508 <UnlockDoor+0x172>
	else if (__tmp > 65535)
    148a:	69 a9       	ldd	r22, Y+49	; 0x31
    148c:	7a a9       	ldd	r23, Y+50	; 0x32
    148e:	8b a9       	ldd	r24, Y+51	; 0x33
    1490:	9c a9       	ldd	r25, Y+52	; 0x34
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	3f ef       	ldi	r19, 0xFF	; 255
    1496:	4f e7       	ldi	r20, 0x7F	; 127
    1498:	57 e4       	ldi	r21, 0x47	; 71
    149a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    149e:	18 16       	cp	r1, r24
    14a0:	4c f5       	brge	.+82     	; 0x14f4 <UnlockDoor+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a2:	6d a9       	ldd	r22, Y+53	; 0x35
    14a4:	7e a9       	ldd	r23, Y+54	; 0x36
    14a6:	8f a9       	ldd	r24, Y+55	; 0x37
    14a8:	98 ad       	ldd	r25, Y+56	; 0x38
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e2       	ldi	r20, 0x20	; 32
    14b0:	51 e4       	ldi	r21, 0x41	; 65
    14b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	98 ab       	std	Y+48, r25	; 0x30
    14c8:	8f a7       	std	Y+47, r24	; 0x2f
    14ca:	0f c0       	rjmp	.+30     	; 0x14ea <UnlockDoor+0x154>
    14cc:	88 ec       	ldi	r24, 0xC8	; 200
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9e a7       	std	Y+46, r25	; 0x2e
    14d2:	8d a7       	std	Y+45, r24	; 0x2d
    14d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    14d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <UnlockDoor+0x142>
    14dc:	9e a7       	std	Y+46, r25	; 0x2e
    14de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14e2:	98 a9       	ldd	r25, Y+48	; 0x30
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	98 ab       	std	Y+48, r25	; 0x30
    14e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ec:	98 a9       	ldd	r25, Y+48	; 0x30
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	69 f7       	brne	.-38     	; 0x14cc <UnlockDoor+0x136>
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <UnlockDoor+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f4:	69 a9       	ldd	r22, Y+49	; 0x31
    14f6:	7a a9       	ldd	r23, Y+50	; 0x32
    14f8:	8b a9       	ldd	r24, Y+51	; 0x33
    14fa:	9c a9       	ldd	r25, Y+52	; 0x34
    14fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	98 ab       	std	Y+48, r25	; 0x30
    1506:	8f a7       	std	Y+47, r24	; 0x2f
    1508:	8f a5       	ldd	r24, Y+47	; 0x2f
    150a:	98 a9       	ldd	r25, Y+48	; 0x30
    150c:	9c a7       	std	Y+44, r25	; 0x2c
    150e:	8b a7       	std	Y+43, r24	; 0x2b
    1510:	8b a5       	ldd	r24, Y+43	; 0x2b
    1512:	9c a5       	ldd	r25, Y+44	; 0x2c
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <UnlockDoor+0x17e>
    1518:	9c a7       	std	Y+44, r25	; 0x2c
    151a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(300);
		LCD_displayString("    UnLocking   ");
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	91 e0       	ldi	r25, 0x01	; 1
    1520:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_displayString>
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	a8 e4       	ldi	r26, 0x48	; 72
    152a:	b4 e4       	ldi	r27, 0x44	; 68
    152c:	8f a3       	std	Y+39, r24	; 0x27
    152e:	98 a7       	std	Y+40, r25	; 0x28
    1530:	a9 a7       	std	Y+41, r26	; 0x29
    1532:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1534:	6f a1       	ldd	r22, Y+39	; 0x27
    1536:	78 a5       	ldd	r23, Y+40	; 0x28
    1538:	89 a5       	ldd	r24, Y+41	; 0x29
    153a:	9a a5       	ldd	r25, Y+42	; 0x2a
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	4a ef       	ldi	r20, 0xFA	; 250
    1542:	54 e4       	ldi	r21, 0x44	; 68
    1544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	8b a3       	std	Y+35, r24	; 0x23
    154e:	9c a3       	std	Y+36, r25	; 0x24
    1550:	ad a3       	std	Y+37, r26	; 0x25
    1552:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1554:	6b a1       	ldd	r22, Y+35	; 0x23
    1556:	7c a1       	ldd	r23, Y+36	; 0x24
    1558:	8d a1       	ldd	r24, Y+37	; 0x25
    155a:	9e a1       	ldd	r25, Y+38	; 0x26
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e8       	ldi	r20, 0x80	; 128
    1562:	5f e3       	ldi	r21, 0x3F	; 63
    1564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1568:	88 23       	and	r24, r24
    156a:	2c f4       	brge	.+10     	; 0x1576 <UnlockDoor+0x1e0>
		__ticks = 1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	9a a3       	std	Y+34, r25	; 0x22
    1572:	89 a3       	std	Y+33, r24	; 0x21
    1574:	3f c0       	rjmp	.+126    	; 0x15f4 <UnlockDoor+0x25e>
	else if (__tmp > 65535)
    1576:	6b a1       	ldd	r22, Y+35	; 0x23
    1578:	7c a1       	ldd	r23, Y+36	; 0x24
    157a:	8d a1       	ldd	r24, Y+37	; 0x25
    157c:	9e a1       	ldd	r25, Y+38	; 0x26
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	3f ef       	ldi	r19, 0xFF	; 255
    1582:	4f e7       	ldi	r20, 0x7F	; 127
    1584:	57 e4       	ldi	r21, 0x47	; 71
    1586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    158a:	18 16       	cp	r1, r24
    158c:	4c f5       	brge	.+82     	; 0x15e0 <UnlockDoor+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158e:	6f a1       	ldd	r22, Y+39	; 0x27
    1590:	78 a5       	ldd	r23, Y+40	; 0x28
    1592:	89 a5       	ldd	r24, Y+41	; 0x29
    1594:	9a a5       	ldd	r25, Y+42	; 0x2a
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e2       	ldi	r20, 0x20	; 32
    159c:	51 e4       	ldi	r21, 0x41	; 65
    159e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	bc 01       	movw	r22, r24
    15a8:	cd 01       	movw	r24, r26
    15aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	9a a3       	std	Y+34, r25	; 0x22
    15b4:	89 a3       	std	Y+33, r24	; 0x21
    15b6:	0f c0       	rjmp	.+30     	; 0x15d6 <UnlockDoor+0x240>
    15b8:	88 ec       	ldi	r24, 0xC8	; 200
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	98 a3       	std	Y+32, r25	; 0x20
    15be:	8f 8f       	std	Y+31, r24	; 0x1f
    15c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15c2:	98 a1       	ldd	r25, Y+32	; 0x20
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	f1 f7       	brne	.-4      	; 0x15c4 <UnlockDoor+0x22e>
    15c8:	98 a3       	std	Y+32, r25	; 0x20
    15ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15cc:	89 a1       	ldd	r24, Y+33	; 0x21
    15ce:	9a a1       	ldd	r25, Y+34	; 0x22
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	9a a3       	std	Y+34, r25	; 0x22
    15d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d6:	89 a1       	ldd	r24, Y+33	; 0x21
    15d8:	9a a1       	ldd	r25, Y+34	; 0x22
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	69 f7       	brne	.-38     	; 0x15b8 <UnlockDoor+0x222>
    15de:	14 c0       	rjmp	.+40     	; 0x1608 <UnlockDoor+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e0:	6b a1       	ldd	r22, Y+35	; 0x23
    15e2:	7c a1       	ldd	r23, Y+36	; 0x24
    15e4:	8d a1       	ldd	r24, Y+37	; 0x25
    15e6:	9e a1       	ldd	r25, Y+38	; 0x26
    15e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	9a a3       	std	Y+34, r25	; 0x22
    15f2:	89 a3       	std	Y+33, r24	; 0x21
    15f4:	89 a1       	ldd	r24, Y+33	; 0x21
    15f6:	9a a1       	ldd	r25, Y+34	; 0x22
    15f8:	9e 8f       	std	Y+30, r25	; 0x1e
    15fa:	8d 8f       	std	Y+29, r24	; 0x1d
    15fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <UnlockDoor+0x26a>
    1604:	9e 8f       	std	Y+30, r25	; 0x1e
    1606:	8d 8f       	std	Y+29, r24	; 0x1d
	/* set call back function for timer 1 */
	TIMER_setCallBack(TIMER1,TimerCallBack);
	/* initialize timer  */
	TIMER_init(&config);
	/* display flashing unlocking on screen while motor is opening the lock */
	while(g_Tick<2)
    1608:	80 91 5d 01 	lds	r24, 0x015D
    160c:	82 30       	cpi	r24, 0x02	; 2
    160e:	08 f4       	brcc	.+2      	; 0x1612 <UnlockDoor+0x27c>
    1610:	11 cf       	rjmp	.-478    	; 0x1434 <UnlockDoor+0x9e>
    1612:	0b c0       	rjmp	.+22     	; 0x162a <UnlockDoor+0x294>
	}
	/* time for opened door */
	while(g_Tick<4)
	{
		/* flag for execute code only one time */
		if(flag==0)
    1614:	89 ad       	ldd	r24, Y+57	; 0x39
    1616:	88 23       	and	r24, r24
    1618:	41 f4       	brne	.+16     	; 0x162a <UnlockDoor+0x294>
		{
			LCD_clearScreen();
    161a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_clearScreen>
			LCD_displayString(" Door Is Opened ");
    161e:	81 e1       	ldi	r24, 0x11	; 17
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_displayString>
			flag=1;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(300);
		LCD_displayString("    UnLocking   ");
		_delay_ms(800);
	}
	/* time for opened door */
	while(g_Tick<4)
    162a:	80 91 5d 01 	lds	r24, 0x015D
    162e:	84 30       	cpi	r24, 0x04	; 4
    1630:	88 f3       	brcs	.-30     	; 0x1614 <UnlockDoor+0x27e>
    1632:	ea c0       	rjmp	.+468    	; 0x1808 <UnlockDoor+0x472>
		}
	}
	/* display flashing locking on screen while motor is closing the lock */
	while(g_Tick<6)
	{
		LCD_clearScreen();
    1634:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_clearScreen>
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	a6 e9       	ldi	r26, 0x96	; 150
    163e:	b3 e4       	ldi	r27, 0x43	; 67
    1640:	89 8f       	std	Y+25, r24	; 0x19
    1642:	9a 8f       	std	Y+26, r25	; 0x1a
    1644:	ab 8f       	std	Y+27, r26	; 0x1b
    1646:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1648:	69 8d       	ldd	r22, Y+25	; 0x19
    164a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    164c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    164e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	4a ef       	ldi	r20, 0xFA	; 250
    1656:	54 e4       	ldi	r21, 0x44	; 68
    1658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	8d 8b       	std	Y+21, r24	; 0x15
    1662:	9e 8b       	std	Y+22, r25	; 0x16
    1664:	af 8b       	std	Y+23, r26	; 0x17
    1666:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1668:	6d 89       	ldd	r22, Y+21	; 0x15
    166a:	7e 89       	ldd	r23, Y+22	; 0x16
    166c:	8f 89       	ldd	r24, Y+23	; 0x17
    166e:	98 8d       	ldd	r25, Y+24	; 0x18
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e8       	ldi	r20, 0x80	; 128
    1676:	5f e3       	ldi	r21, 0x3F	; 63
    1678:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    167c:	88 23       	and	r24, r24
    167e:	2c f4       	brge	.+10     	; 0x168a <UnlockDoor+0x2f4>
		__ticks = 1;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	9c 8b       	std	Y+20, r25	; 0x14
    1686:	8b 8b       	std	Y+19, r24	; 0x13
    1688:	3f c0       	rjmp	.+126    	; 0x1708 <UnlockDoor+0x372>
	else if (__tmp > 65535)
    168a:	6d 89       	ldd	r22, Y+21	; 0x15
    168c:	7e 89       	ldd	r23, Y+22	; 0x16
    168e:	8f 89       	ldd	r24, Y+23	; 0x17
    1690:	98 8d       	ldd	r25, Y+24	; 0x18
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	3f ef       	ldi	r19, 0xFF	; 255
    1696:	4f e7       	ldi	r20, 0x7F	; 127
    1698:	57 e4       	ldi	r21, 0x47	; 71
    169a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    169e:	18 16       	cp	r1, r24
    16a0:	4c f5       	brge	.+82     	; 0x16f4 <UnlockDoor+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a2:	69 8d       	ldd	r22, Y+25	; 0x19
    16a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e2       	ldi	r20, 0x20	; 32
    16b0:	51 e4       	ldi	r21, 0x41	; 65
    16b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	bc 01       	movw	r22, r24
    16bc:	cd 01       	movw	r24, r26
    16be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	9c 8b       	std	Y+20, r25	; 0x14
    16c8:	8b 8b       	std	Y+19, r24	; 0x13
    16ca:	0f c0       	rjmp	.+30     	; 0x16ea <UnlockDoor+0x354>
    16cc:	88 ec       	ldi	r24, 0xC8	; 200
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9a 8b       	std	Y+18, r25	; 0x12
    16d2:	89 8b       	std	Y+17, r24	; 0x11
    16d4:	89 89       	ldd	r24, Y+17	; 0x11
    16d6:	9a 89       	ldd	r25, Y+18	; 0x12
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <UnlockDoor+0x342>
    16dc:	9a 8b       	std	Y+18, r25	; 0x12
    16de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e0:	8b 89       	ldd	r24, Y+19	; 0x13
    16e2:	9c 89       	ldd	r25, Y+20	; 0x14
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	9c 8b       	std	Y+20, r25	; 0x14
    16e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ea:	8b 89       	ldd	r24, Y+19	; 0x13
    16ec:	9c 89       	ldd	r25, Y+20	; 0x14
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	69 f7       	brne	.-38     	; 0x16cc <UnlockDoor+0x336>
    16f2:	14 c0       	rjmp	.+40     	; 0x171c <UnlockDoor+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f4:	6d 89       	ldd	r22, Y+21	; 0x15
    16f6:	7e 89       	ldd	r23, Y+22	; 0x16
    16f8:	8f 89       	ldd	r24, Y+23	; 0x17
    16fa:	98 8d       	ldd	r25, Y+24	; 0x18
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9c 8b       	std	Y+20, r25	; 0x14
    1706:	8b 8b       	std	Y+19, r24	; 0x13
    1708:	8b 89       	ldd	r24, Y+19	; 0x13
    170a:	9c 89       	ldd	r25, Y+20	; 0x14
    170c:	98 8b       	std	Y+16, r25	; 0x10
    170e:	8f 87       	std	Y+15, r24	; 0x0f
    1710:	8f 85       	ldd	r24, Y+15	; 0x0f
    1712:	98 89       	ldd	r25, Y+16	; 0x10
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <UnlockDoor+0x37e>
    1718:	98 8b       	std	Y+16, r25	; 0x10
    171a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		LCD_displayString("     Locking    ");
    171c:	82 e2       	ldi	r24, 0x22	; 34
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_displayString>
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	a8 e4       	ldi	r26, 0x48	; 72
    172a:	b4 e4       	ldi	r27, 0x44	; 68
    172c:	8b 87       	std	Y+11, r24	; 0x0b
    172e:	9c 87       	std	Y+12, r25	; 0x0c
    1730:	ad 87       	std	Y+13, r26	; 0x0d
    1732:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1734:	6b 85       	ldd	r22, Y+11	; 0x0b
    1736:	7c 85       	ldd	r23, Y+12	; 0x0c
    1738:	8d 85       	ldd	r24, Y+13	; 0x0d
    173a:	9e 85       	ldd	r25, Y+14	; 0x0e
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	4a ef       	ldi	r20, 0xFA	; 250
    1742:	54 e4       	ldi	r21, 0x44	; 68
    1744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	8f 83       	std	Y+7, r24	; 0x07
    174e:	98 87       	std	Y+8, r25	; 0x08
    1750:	a9 87       	std	Y+9, r26	; 0x09
    1752:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1754:	6f 81       	ldd	r22, Y+7	; 0x07
    1756:	78 85       	ldd	r23, Y+8	; 0x08
    1758:	89 85       	ldd	r24, Y+9	; 0x09
    175a:	9a 85       	ldd	r25, Y+10	; 0x0a
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e8       	ldi	r20, 0x80	; 128
    1762:	5f e3       	ldi	r21, 0x3F	; 63
    1764:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1768:	88 23       	and	r24, r24
    176a:	2c f4       	brge	.+10     	; 0x1776 <UnlockDoor+0x3e0>
		__ticks = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	3f c0       	rjmp	.+126    	; 0x17f4 <UnlockDoor+0x45e>
	else if (__tmp > 65535)
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	3f ef       	ldi	r19, 0xFF	; 255
    1782:	4f e7       	ldi	r20, 0x7F	; 127
    1784:	57 e4       	ldi	r21, 0x47	; 71
    1786:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    178a:	18 16       	cp	r1, r24
    178c:	4c f5       	brge	.+82     	; 0x17e0 <UnlockDoor+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1790:	7c 85       	ldd	r23, Y+12	; 0x0c
    1792:	8d 85       	ldd	r24, Y+13	; 0x0d
    1794:	9e 85       	ldd	r25, Y+14	; 0x0e
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e2       	ldi	r20, 0x20	; 32
    179c:	51 e4       	ldi	r21, 0x41	; 65
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	bc 01       	movw	r22, r24
    17a8:	cd 01       	movw	r24, r26
    17aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	9e 83       	std	Y+6, r25	; 0x06
    17b4:	8d 83       	std	Y+5, r24	; 0x05
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <UnlockDoor+0x440>
    17b8:	88 ec       	ldi	r24, 0xC8	; 200
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9c 83       	std	Y+4, r25	; 0x04
    17be:	8b 83       	std	Y+3, r24	; 0x03
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <UnlockDoor+0x42e>
    17c8:	9c 83       	std	Y+4, r25	; 0x04
    17ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	9e 83       	std	Y+6, r25	; 0x06
    17d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	69 f7       	brne	.-38     	; 0x17b8 <UnlockDoor+0x422>
    17de:	14 c0       	rjmp	.+40     	; 0x1808 <UnlockDoor+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e0:	6f 81       	ldd	r22, Y+7	; 0x07
    17e2:	78 85       	ldd	r23, Y+8	; 0x08
    17e4:	89 85       	ldd	r24, Y+9	; 0x09
    17e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	8d 81       	ldd	r24, Y+5	; 0x05
    17f6:	9e 81       	ldd	r25, Y+6	; 0x06
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <UnlockDoor+0x46a>
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01
			LCD_displayString(" Door Is Opened ");
			flag=1;
		}
	}
	/* display flashing locking on screen while motor is closing the lock */
	while(g_Tick<6)
    1808:	80 91 5d 01 	lds	r24, 0x015D
    180c:	86 30       	cpi	r24, 0x06	; 6
    180e:	08 f4       	brcc	.+2      	; 0x1812 <UnlockDoor+0x47c>
    1810:	11 cf       	rjmp	.-478    	; 0x1634 <UnlockDoor+0x29e>
		_delay_ms(300);
		LCD_displayString("     Locking    ");
		_delay_ms(800);
	}
	/* Disable timer1 */
	TIMER_deInit(TIMER1);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	0e 94 25 19 	call	0x324a	; 0x324a <TIMER_deInit>
	/*clear g_Tick*/
	g_Tick=0;
    1818:	10 92 5d 01 	sts	0x015D, r1
}
    181c:	cd 5b       	subi	r28, 0xBD	; 189
    181e:	df 4f       	sbci	r29, 0xFF	; 255
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <TimerCallBack>:

void TimerCallBack(void)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
	g_Tick++; /* Increment flag every timer Interrupt */
    1838:	80 91 5d 01 	lds	r24, 0x015D
    183c:	8f 5f       	subi	r24, 0xFF	; 255
    183e:	80 93 5d 01 	sts	0x015D, r24
}
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <ActivateAlarm>:

void ActivateAlarm(void)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	a6 97       	sbiw	r28, 0x26	; 38
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
	g_AlarmCounter++;
    185c:	80 91 5e 01 	lds	r24, 0x015E
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	80 93 5e 01 	sts	0x015E, r24
	/* configuration of timer */
	T_Config config={TIMER1,CTC,T_CLK_1024,58593};
    1866:	ce 01       	movw	r24, r28
    1868:	4d 96       	adiw	r24, 0x1d	; 29
    186a:	9b a3       	std	Y+35, r25	; 0x23
    186c:	8a a3       	std	Y+34, r24	; 0x22
    186e:	e2 e5       	ldi	r30, 0x52	; 82
    1870:	f1 e0       	ldi	r31, 0x01	; 1
    1872:	fd a3       	std	Y+37, r31	; 0x25
    1874:	ec a3       	std	Y+36, r30	; 0x24
    1876:	f5 e0       	ldi	r31, 0x05	; 5
    1878:	fe a3       	std	Y+38, r31	; 0x26
    187a:	ec a1       	ldd	r30, Y+36	; 0x24
    187c:	fd a1       	ldd	r31, Y+37	; 0x25
    187e:	00 80       	ld	r0, Z
    1880:	8c a1       	ldd	r24, Y+36	; 0x24
    1882:	9d a1       	ldd	r25, Y+37	; 0x25
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	9d a3       	std	Y+37, r25	; 0x25
    1888:	8c a3       	std	Y+36, r24	; 0x24
    188a:	ea a1       	ldd	r30, Y+34	; 0x22
    188c:	fb a1       	ldd	r31, Y+35	; 0x23
    188e:	00 82       	st	Z, r0
    1890:	8a a1       	ldd	r24, Y+34	; 0x22
    1892:	9b a1       	ldd	r25, Y+35	; 0x23
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	9b a3       	std	Y+35, r25	; 0x23
    1898:	8a a3       	std	Y+34, r24	; 0x22
    189a:	9e a1       	ldd	r25, Y+38	; 0x26
    189c:	91 50       	subi	r25, 0x01	; 1
    189e:	9e a3       	std	Y+38, r25	; 0x26
    18a0:	ee a1       	ldd	r30, Y+38	; 0x26
    18a2:	ee 23       	and	r30, r30
    18a4:	51 f7       	brne	.-44     	; 0x187a <ActivateAlarm+0x32>
	/* set call back function for timer 1 */
	TIMER_setCallBack(TIMER1,TimerCallBack);
    18a6:	28 e1       	ldi	r18, 0x18	; 24
    18a8:	3c e0       	ldi	r19, 0x0C	; 12
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	b9 01       	movw	r22, r18
    18ae:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <TIMER_setCallBack>
	/* initialize timer  */
	TIMER_init(&config);
    18b2:	ce 01       	movw	r24, r28
    18b4:	4d 96       	adiw	r24, 0x1d	; 29
    18b6:	0e 94 e7 17 	call	0x2fce	; 0x2fce <TIMER_init>
    18ba:	ea c0       	rjmp	.+468    	; 0x1a90 <ActivateAlarm+0x248>
	/* wait for timer */
	while(g_Tick !=8)
	{
		/* flashing error message on screen */
		LCD_clearScreen();
    18bc:	0e 94 92 16 	call	0x2d24	; 0x2d24 <LCD_clearScreen>
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	a6 e9       	ldi	r26, 0x96	; 150
    18c6:	b3 e4       	ldi	r27, 0x43	; 67
    18c8:	89 8f       	std	Y+25, r24	; 0x19
    18ca:	9a 8f       	std	Y+26, r25	; 0x1a
    18cc:	ab 8f       	std	Y+27, r26	; 0x1b
    18ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d0:	69 8d       	ldd	r22, Y+25	; 0x19
    18d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	4a ef       	ldi	r20, 0xFA	; 250
    18de:	54 e4       	ldi	r21, 0x44	; 68
    18e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	8d 8b       	std	Y+21, r24	; 0x15
    18ea:	9e 8b       	std	Y+22, r25	; 0x16
    18ec:	af 8b       	std	Y+23, r26	; 0x17
    18ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18f0:	6d 89       	ldd	r22, Y+21	; 0x15
    18f2:	7e 89       	ldd	r23, Y+22	; 0x16
    18f4:	8f 89       	ldd	r24, Y+23	; 0x17
    18f6:	98 8d       	ldd	r25, Y+24	; 0x18
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e8       	ldi	r20, 0x80	; 128
    18fe:	5f e3       	ldi	r21, 0x3F	; 63
    1900:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1904:	88 23       	and	r24, r24
    1906:	2c f4       	brge	.+10     	; 0x1912 <ActivateAlarm+0xca>
		__ticks = 1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9c 8b       	std	Y+20, r25	; 0x14
    190e:	8b 8b       	std	Y+19, r24	; 0x13
    1910:	3f c0       	rjmp	.+126    	; 0x1990 <ActivateAlarm+0x148>
	else if (__tmp > 65535)
    1912:	6d 89       	ldd	r22, Y+21	; 0x15
    1914:	7e 89       	ldd	r23, Y+22	; 0x16
    1916:	8f 89       	ldd	r24, Y+23	; 0x17
    1918:	98 8d       	ldd	r25, Y+24	; 0x18
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	3f ef       	ldi	r19, 0xFF	; 255
    191e:	4f e7       	ldi	r20, 0x7F	; 127
    1920:	57 e4       	ldi	r21, 0x47	; 71
    1922:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1926:	18 16       	cp	r1, r24
    1928:	4c f5       	brge	.+82     	; 0x197c <ActivateAlarm+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192a:	69 8d       	ldd	r22, Y+25	; 0x19
    192c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    192e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1930:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e2       	ldi	r20, 0x20	; 32
    1938:	51 e4       	ldi	r21, 0x41	; 65
    193a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9c 8b       	std	Y+20, r25	; 0x14
    1950:	8b 8b       	std	Y+19, r24	; 0x13
    1952:	0f c0       	rjmp	.+30     	; 0x1972 <ActivateAlarm+0x12a>
    1954:	88 ec       	ldi	r24, 0xC8	; 200
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9a 8b       	std	Y+18, r25	; 0x12
    195a:	89 8b       	std	Y+17, r24	; 0x11
    195c:	89 89       	ldd	r24, Y+17	; 0x11
    195e:	9a 89       	ldd	r25, Y+18	; 0x12
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <ActivateAlarm+0x118>
    1964:	9a 8b       	std	Y+18, r25	; 0x12
    1966:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1968:	8b 89       	ldd	r24, Y+19	; 0x13
    196a:	9c 89       	ldd	r25, Y+20	; 0x14
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	9c 8b       	std	Y+20, r25	; 0x14
    1970:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1972:	8b 89       	ldd	r24, Y+19	; 0x13
    1974:	9c 89       	ldd	r25, Y+20	; 0x14
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	69 f7       	brne	.-38     	; 0x1954 <ActivateAlarm+0x10c>
    197a:	14 c0       	rjmp	.+40     	; 0x19a4 <ActivateAlarm+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197c:	6d 89       	ldd	r22, Y+21	; 0x15
    197e:	7e 89       	ldd	r23, Y+22	; 0x16
    1980:	8f 89       	ldd	r24, Y+23	; 0x17
    1982:	98 8d       	ldd	r25, Y+24	; 0x18
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	9c 8b       	std	Y+20, r25	; 0x14
    198e:	8b 8b       	std	Y+19, r24	; 0x13
    1990:	8b 89       	ldd	r24, Y+19	; 0x13
    1992:	9c 89       	ldd	r25, Y+20	; 0x14
    1994:	98 8b       	std	Y+16, r25	; 0x10
    1996:	8f 87       	std	Y+15, r24	; 0x0f
    1998:	8f 85       	ldd	r24, Y+15	; 0x0f
    199a:	98 89       	ldd	r25, Y+16	; 0x10
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <ActivateAlarm+0x154>
    19a0:	98 8b       	std	Y+16, r25	; 0x10
    19a2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		LCD_displayString(" ALARM ACTIVATED ");
    19a4:	83 e3       	ldi	r24, 0x33	; 51
    19a6:	91 e0       	ldi	r25, 0x01	; 1
    19a8:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_displayString>
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	a8 e4       	ldi	r26, 0x48	; 72
    19b2:	b4 e4       	ldi	r27, 0x44	; 68
    19b4:	8b 87       	std	Y+11, r24	; 0x0b
    19b6:	9c 87       	std	Y+12, r25	; 0x0c
    19b8:	ad 87       	std	Y+13, r26	; 0x0d
    19ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19be:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	4a ef       	ldi	r20, 0xFA	; 250
    19ca:	54 e4       	ldi	r21, 0x44	; 68
    19cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	8f 83       	std	Y+7, r24	; 0x07
    19d6:	98 87       	std	Y+8, r25	; 0x08
    19d8:	a9 87       	std	Y+9, r26	; 0x09
    19da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19dc:	6f 81       	ldd	r22, Y+7	; 0x07
    19de:	78 85       	ldd	r23, Y+8	; 0x08
    19e0:	89 85       	ldd	r24, Y+9	; 0x09
    19e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e8       	ldi	r20, 0x80	; 128
    19ea:	5f e3       	ldi	r21, 0x3F	; 63
    19ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19f0:	88 23       	and	r24, r24
    19f2:	2c f4       	brge	.+10     	; 0x19fe <ActivateAlarm+0x1b6>
		__ticks = 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
    19fc:	3f c0       	rjmp	.+126    	; 0x1a7c <ActivateAlarm+0x234>
	else if (__tmp > 65535)
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	3f ef       	ldi	r19, 0xFF	; 255
    1a0a:	4f e7       	ldi	r20, 0x7F	; 127
    1a0c:	57 e4       	ldi	r21, 0x47	; 71
    1a0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a12:	18 16       	cp	r1, r24
    1a14:	4c f5       	brge	.+82     	; 0x1a68 <ActivateAlarm+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e2       	ldi	r20, 0x20	; 32
    1a24:	51 e4       	ldi	r21, 0x41	; 65
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	9e 83       	std	Y+6, r25	; 0x06
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
    1a3e:	0f c0       	rjmp	.+30     	; 0x1a5e <ActivateAlarm+0x216>
    1a40:	88 ec       	ldi	r24, 0xC8	; 200
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9c 83       	std	Y+4, r25	; 0x04
    1a46:	8b 83       	std	Y+3, r24	; 0x03
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <ActivateAlarm+0x204>
    1a50:	9c 83       	std	Y+4, r25	; 0x04
    1a52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	9e 81       	ldd	r25, Y+6	; 0x06
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	9e 83       	std	Y+6, r25	; 0x06
    1a5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a60:	9e 81       	ldd	r25, Y+6	; 0x06
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	69 f7       	brne	.-38     	; 0x1a40 <ActivateAlarm+0x1f8>
    1a66:	14 c0       	rjmp	.+40     	; 0x1a90 <ActivateAlarm+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a68:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6a:	78 85       	ldd	r23, Y+8	; 0x08
    1a6c:	89 85       	ldd	r24, Y+9	; 0x09
    1a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	9e 83       	std	Y+6, r25	; 0x06
    1a7a:	8d 83       	std	Y+5, r24	; 0x05
    1a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a80:	9a 83       	std	Y+2, r25	; 0x02
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <ActivateAlarm+0x240>
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
    1a8e:	89 83       	std	Y+1, r24	; 0x01
	/* set call back function for timer 1 */
	TIMER_setCallBack(TIMER1,TimerCallBack);
	/* initialize timer  */
	TIMER_init(&config);
	/* wait for timer */
	while(g_Tick !=8)
    1a90:	80 91 5d 01 	lds	r24, 0x015D
    1a94:	88 30       	cpi	r24, 0x08	; 8
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <ActivateAlarm+0x252>
    1a98:	11 cf       	rjmp	.-478    	; 0x18bc <ActivateAlarm+0x74>
		_delay_ms(300);
		LCD_displayString(" ALARM ACTIVATED ");
		_delay_ms(800);
	}
	/* Disable Timer */
	TIMER_deInit(TIMER1);
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	0e 94 25 19 	call	0x324a	; 0x324a <TIMER_deInit>
	/* Clear g_tick */
	g_Tick=0;
    1aa0:	10 92 5d 01 	sts	0x015D, r1
	/* clear g_WrongAttemp */
	g_WrongAttemp=0;
    1aa4:	10 92 5c 01 	sts	0x015C, r1
}
    1aa8:	a6 96       	adiw	r28, 0x26	; 38
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <KeyPad_getPressedKey>:
/******************************************************************
 *                                 Functions Definitions          *
 ******************************************************************/

uint8 KeyPad_getPressedKey(void)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <KeyPad_getPressedKey+0x6>
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
	  for(col=0;col<N_col;col++)
    1ac4:	1a 82       	std	Y+2, r1	; 0x02
    1ac6:	4c c0       	rjmp	.+152    	; 0x1b60 <KeyPad_getPressedKey+0xa6>
	  {
		  /*every time 1 columns output and others pins is input including rows  */
		  KEYPAD_PORT_DIR=(0X10<<col);
    1ac8:	ea e3       	ldi	r30, 0x3A	; 58
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	80 e1       	ldi	r24, 0x10	; 16
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <KeyPad_getPressedKey+0x22>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	2a 95       	dec	r18
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <KeyPad_getPressedKey+0x1e>
    1ae0:	80 83       	st	Z, r24
		  /* clear output pin at this columns and activate pull up resistor for others pins   */
		  KEYPAD_PORT_OUT=(~(0X10<<col));
    1ae2:	eb e3       	ldi	r30, 0x3B	; 59
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	80 e1       	ldi	r24, 0x10	; 16
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <KeyPad_getPressedKey+0x3e>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <KeyPad_getPressedKey+0x3a>
    1afc:	80 95       	com	r24
    1afe:	80 83       	st	Z, r24

		  /* loop the rows to check if any key is pressed   */
		  for(row=0;row<N_row;row++)
    1b00:	19 82       	std	Y+1, r1	; 0x01
    1b02:	28 c0       	rjmp	.+80     	; 0x1b54 <KeyPad_getPressedKey+0x9a>
		  {
			  if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /*if the key is pressed (negative logic _ pull up connection)  */
    1b04:	e9 e3       	ldi	r30, 0x39	; 57
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a9 01       	movw	r20, r18
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <KeyPad_getPressedKey+0x62>
    1b18:	55 95       	asr	r21
    1b1a:	47 95       	ror	r20
    1b1c:	8a 95       	dec	r24
    1b1e:	e2 f7       	brpl	.-8      	; 0x1b18 <KeyPad_getPressedKey+0x5e>
    1b20:	ca 01       	movw	r24, r20
    1b22:	81 70       	andi	r24, 0x01	; 1
    1b24:	90 70       	andi	r25, 0x00	; 0
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	91 f4       	brne	.+36     	; 0x1b4e <KeyPad_getPressedKey+0x94>
			  {
                   #if(N_col==4)
				  return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	88 2f       	mov	r24, r24
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	98 2f       	mov	r25, r24
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	89 0f       	add	r24, r25
    1b3e:	8f 5f       	subi	r24, 0xFF	; 255
    1b40:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <KeyPad_4x4_adjustKeyNumber>
			  }
		  }
	  }

  }
}
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret
		  KEYPAD_PORT_DIR=(0X10<<col);
		  /* clear output pin at this columns and activate pull up resistor for others pins   */
		  KEYPAD_PORT_OUT=(~(0X10<<col));

		  /* loop the rows to check if any key is pressed   */
		  for(row=0;row<N_row;row++)
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	8f 5f       	subi	r24, 0xFF	; 255
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	84 30       	cpi	r24, 0x04	; 4
    1b58:	a8 f2       	brcs	.-86     	; 0x1b04 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
	  for(col=0;col<N_col;col++)
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	8f 5f       	subi	r24, 0xFF	; 255
    1b5e:	8a 83       	std	Y+2, r24	; 0x02
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	84 30       	cpi	r24, 0x04	; 4
    1b64:	08 f4       	brcc	.+2      	; 0x1b68 <KeyPad_getPressedKey+0xae>
    1b66:	b0 cf       	rjmp	.-160    	; 0x1ac8 <KeyPad_getPressedKey+0xe>
    1b68:	ad cf       	rjmp	.-166    	; 0x1ac4 <KeyPad_getPressedKey+0xa>

00001b6a <KeyPad_4x4_adjustKeyNumber>:


#if(N_col==4)

static uint8 KeyPad_4x4_adjustKeyNumber(uint8 key_number)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <KeyPad_4x4_adjustKeyNumber+0x6>
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <KeyPad_4x4_adjustKeyNumber+0x8>
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	89 83       	std	Y+1, r24	; 0x01
	switch (key_number)
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	3c 83       	std	Y+4, r19	; 0x04
    1b80:	2b 83       	std	Y+3, r18	; 0x03
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	88 30       	cpi	r24, 0x08	; 8
    1b88:	91 05       	cpc	r25, r1
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <KeyPad_4x4_adjustKeyNumber+0x24>
    1b8c:	70 c0       	rjmp	.+224    	; 0x1c6e <KeyPad_4x4_adjustKeyNumber+0x104>
    1b8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b90:	3c 81       	ldd	r19, Y+4	; 0x04
    1b92:	29 30       	cpi	r18, 0x09	; 9
    1b94:	31 05       	cpc	r19, r1
    1b96:	5c f5       	brge	.+86     	; 0x1bee <KeyPad_4x4_adjustKeyNumber+0x84>
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	84 30       	cpi	r24, 0x04	; 4
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1ba2:	59 c0       	rjmp	.+178    	; 0x1c56 <KeyPad_4x4_adjustKeyNumber+0xec>
    1ba4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba8:	25 30       	cpi	r18, 0x05	; 5
    1baa:	31 05       	cpc	r19, r1
    1bac:	9c f4       	brge	.+38     	; 0x1bd4 <KeyPad_4x4_adjustKeyNumber+0x6a>
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	82 30       	cpi	r24, 0x02	; 2
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <KeyPad_4x4_adjustKeyNumber+0x50>
    1bb8:	48 c0       	rjmp	.+144    	; 0x1c4a <KeyPad_4x4_adjustKeyNumber+0xe0>
    1bba:	2b 81       	ldd	r18, Y+3	; 0x03
    1bbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbe:	23 30       	cpi	r18, 0x03	; 3
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	0c f0       	brlt	.+2      	; 0x1bc6 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1bc4:	45 c0       	rjmp	.+138    	; 0x1c50 <KeyPad_4x4_adjustKeyNumber+0xe6>
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	81 30       	cpi	r24, 0x01	; 1
    1bcc:	91 05       	cpc	r25, r1
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <KeyPad_4x4_adjustKeyNumber+0x68>
    1bd0:	39 c0       	rjmp	.+114    	; 0x1c44 <KeyPad_4x4_adjustKeyNumber+0xda>
    1bd2:	67 c0       	rjmp	.+206    	; 0x1ca2 <KeyPad_4x4_adjustKeyNumber+0x138>
    1bd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd8:	26 30       	cpi	r18, 0x06	; 6
    1bda:	31 05       	cpc	r19, r1
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <KeyPad_4x4_adjustKeyNumber+0x76>
    1bde:	41 c0       	rjmp	.+130    	; 0x1c62 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	87 30       	cpi	r24, 0x07	; 7
    1be6:	91 05       	cpc	r25, r1
    1be8:	0c f0       	brlt	.+2      	; 0x1bec <KeyPad_4x4_adjustKeyNumber+0x82>
    1bea:	3e c0       	rjmp	.+124    	; 0x1c68 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1bec:	37 c0       	rjmp	.+110    	; 0x1c5c <KeyPad_4x4_adjustKeyNumber+0xf2>
    1bee:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf2:	2c 30       	cpi	r18, 0x0C	; 12
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <KeyPad_4x4_adjustKeyNumber+0x90>
    1bf8:	46 c0       	rjmp	.+140    	; 0x1c86 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	8d 30       	cpi	r24, 0x0D	; 13
    1c00:	91 05       	cpc	r25, r1
    1c02:	5c f4       	brge	.+22     	; 0x1c1a <KeyPad_4x4_adjustKeyNumber+0xb0>
    1c04:	2b 81       	ldd	r18, Y+3	; 0x03
    1c06:	3c 81       	ldd	r19, Y+4	; 0x04
    1c08:	2a 30       	cpi	r18, 0x0A	; 10
    1c0a:	31 05       	cpc	r19, r1
    1c0c:	b1 f1       	breq	.+108    	; 0x1c7a <KeyPad_4x4_adjustKeyNumber+0x110>
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	8b 30       	cpi	r24, 0x0B	; 11
    1c14:	91 05       	cpc	r25, r1
    1c16:	a4 f5       	brge	.+104    	; 0x1c80 <KeyPad_4x4_adjustKeyNumber+0x116>
    1c18:	2d c0       	rjmp	.+90     	; 0x1c74 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1c1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1e:	2e 30       	cpi	r18, 0x0E	; 14
    1c20:	31 05       	cpc	r19, r1
    1c22:	b9 f1       	breq	.+110    	; 0x1c92 <KeyPad_4x4_adjustKeyNumber+0x128>
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	9c 81       	ldd	r25, Y+4	; 0x04
    1c28:	8e 30       	cpi	r24, 0x0E	; 14
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	7c f1       	brlt	.+94     	; 0x1c8c <KeyPad_4x4_adjustKeyNumber+0x122>
    1c2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c30:	3c 81       	ldd	r19, Y+4	; 0x04
    1c32:	2f 30       	cpi	r18, 0x0F	; 15
    1c34:	31 05       	cpc	r19, r1
    1c36:	79 f1       	breq	.+94     	; 0x1c96 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	80 31       	cpi	r24, 0x10	; 16
    1c3e:	91 05       	cpc	r25, r1
    1c40:	69 f1       	breq	.+90     	; 0x1c9c <KeyPad_4x4_adjustKeyNumber+0x132>
    1c42:	2f c0       	rjmp	.+94     	; 0x1ca2 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
	     case 1:
	    	 return 7;
    1c44:	97 e0       	ldi	r25, 0x07	; 7
    1c46:	9a 83       	std	Y+2, r25	; 0x02
    1c48:	2e c0       	rjmp	.+92     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 2:
	    	 return 8;
    1c4a:	28 e0       	ldi	r18, 0x08	; 8
    1c4c:	2a 83       	std	Y+2, r18	; 0x02
    1c4e:	2b c0       	rjmp	.+86     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 3:
	    	 return 9;
    1c50:	39 e0       	ldi	r19, 0x09	; 9
    1c52:	3a 83       	std	Y+2, r19	; 0x02
    1c54:	28 c0       	rjmp	.+80     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 4:
	    	 return '/';
    1c56:	8f e2       	ldi	r24, 0x2F	; 47
    1c58:	8a 83       	std	Y+2, r24	; 0x02
    1c5a:	25 c0       	rjmp	.+74     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 5:
	    	 return 4;
    1c5c:	94 e0       	ldi	r25, 0x04	; 4
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	22 c0       	rjmp	.+68     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 6:
	    	 return 5;
    1c62:	25 e0       	ldi	r18, 0x05	; 5
    1c64:	2a 83       	std	Y+2, r18	; 0x02
    1c66:	1f c0       	rjmp	.+62     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 7:
	    	 return 6;
    1c68:	36 e0       	ldi	r19, 0x06	; 6
    1c6a:	3a 83       	std	Y+2, r19	; 0x02
    1c6c:	1c c0       	rjmp	.+56     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 8:
	    	 return '*';
    1c6e:	8a e2       	ldi	r24, 0x2A	; 42
    1c70:	8a 83       	std	Y+2, r24	; 0x02
    1c72:	19 c0       	rjmp	.+50     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 9:
	    	 return 1;
    1c74:	91 e0       	ldi	r25, 0x01	; 1
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	16 c0       	rjmp	.+44     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 10:
	    	 return 2;
    1c7a:	22 e0       	ldi	r18, 0x02	; 2
    1c7c:	2a 83       	std	Y+2, r18	; 0x02
    1c7e:	13 c0       	rjmp	.+38     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 11:
	    	 return 3;
    1c80:	33 e0       	ldi	r19, 0x03	; 3
    1c82:	3a 83       	std	Y+2, r19	; 0x02
    1c84:	10 c0       	rjmp	.+32     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 12:
	    	 return '-';
    1c86:	8d e2       	ldi	r24, 0x2D	; 45
    1c88:	8a 83       	std	Y+2, r24	; 0x02
    1c8a:	0d c0       	rjmp	.+26     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 13:
	    	 return 13;
    1c8c:	9d e0       	ldi	r25, 0x0D	; 13
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	0a c0       	rjmp	.+20     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 14:
	    	 return 0;
    1c92:	1a 82       	std	Y+2, r1	; 0x02
    1c94:	08 c0       	rjmp	.+16     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 15:
	    	 return '=';
    1c96:	2d e3       	ldi	r18, 0x3D	; 61
    1c98:	2a 83       	std	Y+2, r18	; 0x02
    1c9a:	05 c0       	rjmp	.+10     	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     case 16:
	    	 return '+';
    1c9c:	3b e2       	ldi	r19, 0x2B	; 43
    1c9e:	3a 83       	std	Y+2, r19	; 0x02
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x13c>
	     default :
	    	 return key_number;
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	8a 83       	std	Y+2, r24	; 0x02
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <LCD_init>:
/******************************************************************
 *                                 Functions Definitions          *
 ******************************************************************/

void LCD_init(void)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	0f 92       	push	r0
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<RS) | (1<<RW) | (1<<E);        /* Configure control pin RW & RS & E as output  */
    1cc0:	a1 e3       	ldi	r26, 0x31	; 49
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e1 e3       	ldi	r30, 0x31	; 49
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	80 6e       	ori	r24, 0xE0	; 224
    1ccc:	8c 93       	st	X, r24
	LCD_DATA_PORT_DIR |= 0XF0;                              /* Configure the last 4 pins as output */
 #endif
	LCD_sendCommand(FOUR_BITS_DATA_MODE);                   /* initialize LCD in 4_bit data mode */
	LCD_sendCommand(TWO_LINE_LCD_FOUR_BIT_MODE);            /* use 2-line LCD + 4-bit Data Mode + 5*7 dot display Mode */
#elif (KEYPAD_BITS_MODE == 8)
	LCD_DATA_PORT_DIR |=0XFF;                               /* Configure data port as output  */
    1cce:	e4 e3       	ldi	r30, 0x34	; 52
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	e4 e3       	ldi	r30, 0x34	; 52
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	8f ef       	ldi	r24, 0xFF	; 255
    1cda:	80 83       	st	Z, r24
	LCD_sendCommand(TWO_LINE_LCD_EIGHT_BIT_MODE);           /* use 2-line LCD + 8-bit Data Mode + 5*7 dot display Mode */
    1cdc:	88 e3       	ldi	r24, 0x38	; 56
    1cde:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
#endif
	LCD_sendCommand(CURSOR_OFF);
    1ce2:	8c e0       	ldi	r24, 0x0C	; 12
    1ce4:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND);                         /* clear LCD at the beginning */
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
}
    1cee:	0f 90       	pop	r0
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <LCD_sendCommand>:



void LCD_sendCommand(uint8 command)
{
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	c1 56       	subi	r28, 0x61	; 97
    1d04:	d0 40       	sbci	r29, 0x00	; 0
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	fe 01       	movw	r30, r28
    1d12:	ef 59       	subi	r30, 0x9F	; 159
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RS);       /* Clear RS for sending command */
    1d18:	a2 e3       	ldi	r26, 0x32	; 50
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e2 e3       	ldi	r30, 0x32	; 50
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	8f 7d       	andi	r24, 0xDF	; 223
    1d24:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RW);       /* Clear RW for Writing */
    1d26:	a2 e3       	ldi	r26, 0x32	; 50
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e2 e3       	ldi	r30, 0x32	; 50
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	8f 7b       	andi	r24, 0xBF	; 191
    1d32:	8c 93       	st	X, r24
    1d34:	fe 01       	movw	r30, r28
    1d36:	e3 5a       	subi	r30, 0xA3	; 163
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a0 e8       	ldi	r26, 0x80	; 128
    1d40:	bf e3       	ldi	r27, 0x3F	; 63
    1d42:	80 83       	st	Z, r24
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	a2 83       	std	Z+2, r26	; 0x02
    1d48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d4a:	8e 01       	movw	r16, r28
    1d4c:	07 5a       	subi	r16, 0xA7	; 167
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	fe 01       	movw	r30, r28
    1d52:	e3 5a       	subi	r30, 0xA3	; 163
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	2b ea       	ldi	r18, 0xAB	; 171
    1d60:	3a ea       	ldi	r19, 0xAA	; 170
    1d62:	4a e2       	ldi	r20, 0x2A	; 42
    1d64:	50 e4       	ldi	r21, 0x40	; 64
    1d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	f8 01       	movw	r30, r16
    1d70:	80 83       	st	Z, r24
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	a2 83       	std	Z+2, r26	; 0x02
    1d76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e7 5a       	subi	r30, 0xA7	; 167
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	60 81       	ld	r22, Z
    1d80:	71 81       	ldd	r23, Z+1	; 0x01
    1d82:	82 81       	ldd	r24, Z+2	; 0x02
    1d84:	93 81       	ldd	r25, Z+3	; 0x03
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e8       	ldi	r20, 0x80	; 128
    1d8c:	5f e3       	ldi	r21, 0x3F	; 63
    1d8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d92:	88 23       	and	r24, r24
    1d94:	34 f4       	brge	.+12     	; 0x1da2 <LCD_sendCommand+0xac>
		__ticks = 1;
    1d96:	fe 01       	movw	r30, r28
    1d98:	e8 5a       	subi	r30, 0xA8	; 168
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	80 83       	st	Z, r24
    1da0:	e0 c0       	rjmp	.+448    	; 0x1f62 <LCD_sendCommand+0x26c>
	else if (__tmp > 255)
    1da2:	fe 01       	movw	r30, r28
    1da4:	e7 5a       	subi	r30, 0xA7	; 167
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4f e7       	ldi	r20, 0x7F	; 127
    1db6:	53 e4       	ldi	r21, 0x43	; 67
    1db8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dbc:	18 16       	cp	r1, r24
    1dbe:	0c f0       	brlt	.+2      	; 0x1dc2 <LCD_sendCommand+0xcc>
    1dc0:	c0 c0       	rjmp	.+384    	; 0x1f42 <LCD_sendCommand+0x24c>
	{
		_delay_ms(__us / 1000.0);
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e3 5a       	subi	r30, 0xA3	; 163
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	60 81       	ld	r22, Z
    1dca:	71 81       	ldd	r23, Z+1	; 0x01
    1dcc:	82 81       	ldd	r24, Z+2	; 0x02
    1dce:	93 81       	ldd	r25, Z+3	; 0x03
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	4a e7       	ldi	r20, 0x7A	; 122
    1dd6:	54 e4       	ldi	r21, 0x44	; 68
    1dd8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	fe 01       	movw	r30, r28
    1de2:	ec 5a       	subi	r30, 0xAC	; 172
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 83       	st	Z, r24
    1de8:	91 83       	std	Z+1, r25	; 0x01
    1dea:	a2 83       	std	Z+2, r26	; 0x02
    1dec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dee:	8e 01       	movw	r16, r28
    1df0:	00 5b       	subi	r16, 0xB0	; 176
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	fe 01       	movw	r30, r28
    1df6:	ec 5a       	subi	r30, 0xAC	; 172
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	60 81       	ld	r22, Z
    1dfc:	71 81       	ldd	r23, Z+1	; 0x01
    1dfe:	82 81       	ldd	r24, Z+2	; 0x02
    1e00:	93 81       	ldd	r25, Z+3	; 0x03
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	4a ef       	ldi	r20, 0xFA	; 250
    1e08:	54 e4       	ldi	r21, 0x44	; 68
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	f8 01       	movw	r30, r16
    1e14:	80 83       	st	Z, r24
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	a2 83       	std	Z+2, r26	; 0x02
    1e1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	e0 5b       	subi	r30, 0xB0	; 176
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	60 81       	ld	r22, Z
    1e24:	71 81       	ldd	r23, Z+1	; 0x01
    1e26:	82 81       	ldd	r24, Z+2	; 0x02
    1e28:	93 81       	ldd	r25, Z+3	; 0x03
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	5f e3       	ldi	r21, 0x3F	; 63
    1e32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e36:	88 23       	and	r24, r24
    1e38:	44 f4       	brge	.+16     	; 0x1e4a <LCD_sendCommand+0x154>
		__ticks = 1;
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e2 5b       	subi	r30, 0xB2	; 178
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	80 83       	st	Z, r24
    1e48:	64 c0       	rjmp	.+200    	; 0x1f12 <LCD_sendCommand+0x21c>
	else if (__tmp > 65535)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e0 5b       	subi	r30, 0xB0	; 176
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	60 81       	ld	r22, Z
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	3f ef       	ldi	r19, 0xFF	; 255
    1e5c:	4f e7       	ldi	r20, 0x7F	; 127
    1e5e:	57 e4       	ldi	r21, 0x47	; 71
    1e60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e64:	18 16       	cp	r1, r24
    1e66:	0c f0       	brlt	.+2      	; 0x1e6a <LCD_sendCommand+0x174>
    1e68:	43 c0       	rjmp	.+134    	; 0x1ef0 <LCD_sendCommand+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	ec 5a       	subi	r30, 0xAC	; 172
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	60 81       	ld	r22, Z
    1e72:	71 81       	ldd	r23, Z+1	; 0x01
    1e74:	82 81       	ldd	r24, Z+2	; 0x02
    1e76:	93 81       	ldd	r25, Z+3	; 0x03
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e2       	ldi	r20, 0x20	; 32
    1e7e:	51 e4       	ldi	r21, 0x41	; 65
    1e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	8e 01       	movw	r16, r28
    1e8a:	02 5b       	subi	r16, 0xB2	; 178
    1e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	80 83       	st	Z, r24
    1ea0:	1f c0       	rjmp	.+62     	; 0x1ee0 <LCD_sendCommand+0x1ea>
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e4 5b       	subi	r30, 0xB4	; 180
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	88 ec       	ldi	r24, 0xC8	; 200
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	e4 5b       	subi	r30, 0xB4	; 180
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	80 81       	ld	r24, Z
    1eb8:	91 81       	ldd	r25, Z+1	; 0x01
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <LCD_sendCommand+0x1c4>
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e4 5b       	subi	r30, 0xB4	; 180
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	91 83       	std	Z+1, r25	; 0x01
    1ec6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec8:	de 01       	movw	r26, r28
    1eca:	a2 5b       	subi	r26, 0xB2	; 178
    1ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e2 5b       	subi	r30, 0xB2	; 178
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	80 81       	ld	r24, Z
    1ed6:	91 81       	ldd	r25, Z+1	; 0x01
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	11 96       	adiw	r26, 0x01	; 1
    1edc:	9c 93       	st	X, r25
    1ede:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e2 5b       	subi	r30, 0xB2	; 178
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 81       	ld	r24, Z
    1ee8:	91 81       	ldd	r25, Z+1	; 0x01
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	d1 f6       	brne	.-76     	; 0x1ea2 <LCD_sendCommand+0x1ac>
    1eee:	4b c0       	rjmp	.+150    	; 0x1f86 <LCD_sendCommand+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef0:	8e 01       	movw	r16, r28
    1ef2:	02 5b       	subi	r16, 0xB2	; 178
    1ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	e0 5b       	subi	r30, 0xB0	; 176
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	60 81       	ld	r22, Z
    1efe:	71 81       	ldd	r23, Z+1	; 0x01
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	93 81       	ldd	r25, Z+3	; 0x03
    1f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	f8 01       	movw	r30, r16
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	80 83       	st	Z, r24
    1f12:	de 01       	movw	r26, r28
    1f14:	a6 5b       	subi	r26, 0xB6	; 182
    1f16:	bf 4f       	sbci	r27, 0xFF	; 255
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e2 5b       	subi	r30, 0xB2	; 178
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	80 81       	ld	r24, Z
    1f20:	91 81       	ldd	r25, Z+1	; 0x01
    1f22:	11 96       	adiw	r26, 0x01	; 1
    1f24:	9c 93       	st	X, r25
    1f26:	8e 93       	st	-X, r24
    1f28:	fe 01       	movw	r30, r28
    1f2a:	e6 5b       	subi	r30, 0xB6	; 182
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	80 81       	ld	r24, Z
    1f30:	91 81       	ldd	r25, Z+1	; 0x01
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_sendCommand+0x23c>
    1f36:	fe 01       	movw	r30, r28
    1f38:	e6 5b       	subi	r30, 0xB6	; 182
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	80 83       	st	Z, r24
    1f40:	22 c0       	rjmp	.+68     	; 0x1f86 <LCD_sendCommand+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f42:	8e 01       	movw	r16, r28
    1f44:	08 5a       	subi	r16, 0xA8	; 168
    1f46:	1f 4f       	sbci	r17, 0xFF	; 255
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e7 5a       	subi	r30, 0xA7	; 167
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	60 81       	ld	r22, Z
    1f50:	71 81       	ldd	r23, Z+1	; 0x01
    1f52:	82 81       	ldd	r24, Z+2	; 0x02
    1f54:	93 81       	ldd	r25, Z+3	; 0x03
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	f8 01       	movw	r30, r16
    1f60:	80 83       	st	Z, r24
    1f62:	de 01       	movw	r26, r28
    1f64:	a7 5b       	subi	r26, 0xB7	; 183
    1f66:	bf 4f       	sbci	r27, 0xFF	; 255
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e8 5a       	subi	r30, 0xA8	; 168
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	80 81       	ld	r24, Z
    1f70:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f72:	fe 01       	movw	r30, r28
    1f74:	e7 5b       	subi	r30, 0xB7	; 183
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	80 81       	ld	r24, Z
    1f7a:	8a 95       	dec	r24
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <LCD_sendCommand+0x284>
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e7 5b       	subi	r30, 0xB7	; 183
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	80 83       	st	Z, r24
	_delay_us(1);                          /* Delay tas(address set up time tas= 50 ns minimum)  */
	SET_BIT(LCD_CTRL_PORT_OUT,E);          /* Set E */
    1f86:	a2 e3       	ldi	r26, 0x32	; 50
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e2 e3       	ldi	r30, 0x32	; 50
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	80 68       	ori	r24, 0x80	; 128
    1f92:	8c 93       	st	X, r24
    1f94:	fe 01       	movw	r30, r28
    1f96:	eb 5b       	subi	r30, 0xBB	; 187
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	a0 e8       	ldi	r26, 0x80	; 128
    1fa0:	bf e3       	ldi	r27, 0x3F	; 63
    1fa2:	80 83       	st	Z, r24
    1fa4:	91 83       	std	Z+1, r25	; 0x01
    1fa6:	a2 83       	std	Z+2, r26	; 0x02
    1fa8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1faa:	8e 01       	movw	r16, r28
    1fac:	0f 5b       	subi	r16, 0xBF	; 191
    1fae:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	eb 5b       	subi	r30, 0xBB	; 187
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	2b ea       	ldi	r18, 0xAB	; 171
    1fc0:	3a ea       	ldi	r19, 0xAA	; 170
    1fc2:	4a e2       	ldi	r20, 0x2A	; 42
    1fc4:	50 e4       	ldi	r21, 0x40	; 64
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	f8 01       	movw	r30, r16
    1fd0:	80 83       	st	Z, r24
    1fd2:	91 83       	std	Z+1, r25	; 0x01
    1fd4:	a2 83       	std	Z+2, r26	; 0x02
    1fd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fd8:	fe 01       	movw	r30, r28
    1fda:	ef 5b       	subi	r30, 0xBF	; 191
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	60 81       	ld	r22, Z
    1fe0:	71 81       	ldd	r23, Z+1	; 0x01
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	93 81       	ldd	r25, Z+3	; 0x03
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	34 f4       	brge	.+12     	; 0x2002 <LCD_sendCommand+0x30c>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e0 5c       	subi	r30, 0xC0	; 192
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	80 83       	st	Z, r24
    2000:	9d c0       	rjmp	.+314    	; 0x213c <LCD_sendCommand+0x446>
	else if (__tmp > 255)
    2002:	fe 01       	movw	r30, r28
    2004:	ef 5b       	subi	r30, 0xBF	; 191
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	60 81       	ld	r22, Z
    200a:	71 81       	ldd	r23, Z+1	; 0x01
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	53 e4       	ldi	r21, 0x43	; 67
    2018:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    201c:	18 16       	cp	r1, r24
    201e:	0c f0       	brlt	.+2      	; 0x2022 <LCD_sendCommand+0x32c>
    2020:	7e c0       	rjmp	.+252    	; 0x211e <LCD_sendCommand+0x428>
	{
		_delay_ms(__us / 1000.0);
    2022:	fe 01       	movw	r30, r28
    2024:	eb 5b       	subi	r30, 0xBB	; 187
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	60 81       	ld	r22, Z
    202a:	71 81       	ldd	r23, Z+1	; 0x01
    202c:	82 81       	ldd	r24, Z+2	; 0x02
    202e:	93 81       	ldd	r25, Z+3	; 0x03
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a e7       	ldi	r20, 0x7A	; 122
    2036:	54 e4       	ldi	r21, 0x44	; 68
    2038:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8c af       	std	Y+60, r24	; 0x3c
    2042:	9d af       	std	Y+61, r25	; 0x3d
    2044:	ae af       	std	Y+62, r26	; 0x3e
    2046:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2048:	6c ad       	ldd	r22, Y+60	; 0x3c
    204a:	7d ad       	ldd	r23, Y+61	; 0x3d
    204c:	8e ad       	ldd	r24, Y+62	; 0x3e
    204e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4a ef       	ldi	r20, 0xFA	; 250
    2056:	54 e4       	ldi	r21, 0x44	; 68
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	88 af       	std	Y+56, r24	; 0x38
    2062:	99 af       	std	Y+57, r25	; 0x39
    2064:	aa af       	std	Y+58, r26	; 0x3a
    2066:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2068:	68 ad       	ldd	r22, Y+56	; 0x38
    206a:	79 ad       	ldd	r23, Y+57	; 0x39
    206c:	8a ad       	ldd	r24, Y+58	; 0x3a
    206e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e8       	ldi	r20, 0x80	; 128
    2076:	5f e3       	ldi	r21, 0x3F	; 63
    2078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    207c:	88 23       	and	r24, r24
    207e:	2c f4       	brge	.+10     	; 0x208a <LCD_sendCommand+0x394>
		__ticks = 1;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9f ab       	std	Y+55, r25	; 0x37
    2086:	8e ab       	std	Y+54, r24	; 0x36
    2088:	3f c0       	rjmp	.+126    	; 0x2108 <LCD_sendCommand+0x412>
	else if (__tmp > 65535)
    208a:	68 ad       	ldd	r22, Y+56	; 0x38
    208c:	79 ad       	ldd	r23, Y+57	; 0x39
    208e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2090:	9b ad       	ldd	r25, Y+59	; 0x3b
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	3f ef       	ldi	r19, 0xFF	; 255
    2096:	4f e7       	ldi	r20, 0x7F	; 127
    2098:	57 e4       	ldi	r21, 0x47	; 71
    209a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    209e:	18 16       	cp	r1, r24
    20a0:	4c f5       	brge	.+82     	; 0x20f4 <LCD_sendCommand+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a2:	6c ad       	ldd	r22, Y+60	; 0x3c
    20a4:	7d ad       	ldd	r23, Y+61	; 0x3d
    20a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    20a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e2       	ldi	r20, 0x20	; 32
    20b0:	51 e4       	ldi	r21, 0x41	; 65
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	9f ab       	std	Y+55, r25	; 0x37
    20c8:	8e ab       	std	Y+54, r24	; 0x36
    20ca:	0f c0       	rjmp	.+30     	; 0x20ea <LCD_sendCommand+0x3f4>
    20cc:	88 ec       	ldi	r24, 0xC8	; 200
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9d ab       	std	Y+53, r25	; 0x35
    20d2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20d4:	8c a9       	ldd	r24, Y+52	; 0x34
    20d6:	9d a9       	ldd	r25, Y+53	; 0x35
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_sendCommand+0x3e2>
    20dc:	9d ab       	std	Y+53, r25	; 0x35
    20de:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e0:	8e a9       	ldd	r24, Y+54	; 0x36
    20e2:	9f a9       	ldd	r25, Y+55	; 0x37
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	9f ab       	std	Y+55, r25	; 0x37
    20e8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ea:	8e a9       	ldd	r24, Y+54	; 0x36
    20ec:	9f a9       	ldd	r25, Y+55	; 0x37
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	69 f7       	brne	.-38     	; 0x20cc <LCD_sendCommand+0x3d6>
    20f2:	2d c0       	rjmp	.+90     	; 0x214e <LCD_sendCommand+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f4:	68 ad       	ldd	r22, Y+56	; 0x38
    20f6:	79 ad       	ldd	r23, Y+57	; 0x39
    20f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    20fa:	9b ad       	ldd	r25, Y+59	; 0x3b
    20fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	9f ab       	std	Y+55, r25	; 0x37
    2106:	8e ab       	std	Y+54, r24	; 0x36
    2108:	8e a9       	ldd	r24, Y+54	; 0x36
    210a:	9f a9       	ldd	r25, Y+55	; 0x37
    210c:	9b ab       	std	Y+51, r25	; 0x33
    210e:	8a ab       	std	Y+50, r24	; 0x32
    2110:	8a a9       	ldd	r24, Y+50	; 0x32
    2112:	9b a9       	ldd	r25, Y+51	; 0x33
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <LCD_sendCommand+0x41e>
    2118:	9b ab       	std	Y+51, r25	; 0x33
    211a:	8a ab       	std	Y+50, r24	; 0x32
    211c:	18 c0       	rjmp	.+48     	; 0x214e <LCD_sendCommand+0x458>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    211e:	fe 01       	movw	r30, r28
    2120:	ef 5b       	subi	r30, 0xBF	; 191
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	60 81       	ld	r22, Z
    2126:	71 81       	ldd	r23, Z+1	; 0x01
    2128:	82 81       	ldd	r24, Z+2	; 0x02
    212a:	93 81       	ldd	r25, Z+3	; 0x03
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	fe 01       	movw	r30, r28
    2136:	e0 5c       	subi	r30, 0xC0	; 192
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 83       	st	Z, r24
    213c:	fe 01       	movw	r30, r28
    213e:	e0 5c       	subi	r30, 0xC0	; 192
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 81       	ld	r24, Z
    2144:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2146:	89 a9       	ldd	r24, Y+49	; 0x31
    2148:	8a 95       	dec	r24
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_sendCommand+0x452>
    214c:	89 ab       	std	Y+49, r24	; 0x31
     LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & (~ 0X0F)) |((command & 0X0F));
  #elif (PORT_PINS_SELECTION  == 1)
     LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & (~ 0XF0)) | ((command & 0X0F) <<4);
  #endif
#elif(KEYPAD_BITS_MODE == 8)
	 LCD_DATA_PORT_OUT = command;           /* Write command to output port */
    214e:	a5 e3       	ldi	r26, 0x35	; 53
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	fe 01       	movw	r30, r28
    2154:	ef 59       	subi	r30, 0x9F	; 159
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	8c 93       	st	X, r24
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	a0 e8       	ldi	r26, 0x80	; 128
    2162:	bf e3       	ldi	r27, 0x3F	; 63
    2164:	8d a7       	std	Y+45, r24	; 0x2d
    2166:	9e a7       	std	Y+46, r25	; 0x2e
    2168:	af a7       	std	Y+47, r26	; 0x2f
    216a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    216c:	6d a5       	ldd	r22, Y+45	; 0x2d
    216e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2170:	8f a5       	ldd	r24, Y+47	; 0x2f
    2172:	98 a9       	ldd	r25, Y+48	; 0x30
    2174:	2b ea       	ldi	r18, 0xAB	; 171
    2176:	3a ea       	ldi	r19, 0xAA	; 170
    2178:	4a e2       	ldi	r20, 0x2A	; 42
    217a:	50 e4       	ldi	r21, 0x40	; 64
    217c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	89 a7       	std	Y+41, r24	; 0x29
    2186:	9a a7       	std	Y+42, r25	; 0x2a
    2188:	ab a7       	std	Y+43, r26	; 0x2b
    218a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    218c:	69 a5       	ldd	r22, Y+41	; 0x29
    218e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2190:	8b a5       	ldd	r24, Y+43	; 0x2b
    2192:	9c a5       	ldd	r25, Y+44	; 0x2c
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e8       	ldi	r20, 0x80	; 128
    219a:	5f e3       	ldi	r21, 0x3F	; 63
    219c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a0:	88 23       	and	r24, r24
    21a2:	1c f4       	brge	.+6      	; 0x21aa <LCD_sendCommand+0x4b4>
		__ticks = 1;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	88 a7       	std	Y+40, r24	; 0x28
    21a8:	91 c0       	rjmp	.+290    	; 0x22cc <LCD_sendCommand+0x5d6>
	else if (__tmp > 255)
    21aa:	69 a5       	ldd	r22, Y+41	; 0x29
    21ac:	7a a5       	ldd	r23, Y+42	; 0x2a
    21ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    21b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	4f e7       	ldi	r20, 0x7F	; 127
    21b8:	53 e4       	ldi	r21, 0x43	; 67
    21ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21be:	18 16       	cp	r1, r24
    21c0:	0c f0       	brlt	.+2      	; 0x21c4 <LCD_sendCommand+0x4ce>
    21c2:	7b c0       	rjmp	.+246    	; 0x22ba <LCD_sendCommand+0x5c4>
	{
		_delay_ms(__us / 1000.0);
    21c4:	6d a5       	ldd	r22, Y+45	; 0x2d
    21c6:	7e a5       	ldd	r23, Y+46	; 0x2e
    21c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ca:	98 a9       	ldd	r25, Y+48	; 0x30
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	4a e7       	ldi	r20, 0x7A	; 122
    21d2:	54 e4       	ldi	r21, 0x44	; 68
    21d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	8c a3       	std	Y+36, r24	; 0x24
    21de:	9d a3       	std	Y+37, r25	; 0x25
    21e0:	ae a3       	std	Y+38, r26	; 0x26
    21e2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e4:	6c a1       	ldd	r22, Y+36	; 0x24
    21e6:	7d a1       	ldd	r23, Y+37	; 0x25
    21e8:	8e a1       	ldd	r24, Y+38	; 0x26
    21ea:	9f a1       	ldd	r25, Y+39	; 0x27
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4a ef       	ldi	r20, 0xFA	; 250
    21f2:	54 e4       	ldi	r21, 0x44	; 68
    21f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	88 a3       	std	Y+32, r24	; 0x20
    21fe:	99 a3       	std	Y+33, r25	; 0x21
    2200:	aa a3       	std	Y+34, r26	; 0x22
    2202:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2204:	68 a1       	ldd	r22, Y+32	; 0x20
    2206:	79 a1       	ldd	r23, Y+33	; 0x21
    2208:	8a a1       	ldd	r24, Y+34	; 0x22
    220a:	9b a1       	ldd	r25, Y+35	; 0x23
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e8       	ldi	r20, 0x80	; 128
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2218:	88 23       	and	r24, r24
    221a:	2c f4       	brge	.+10     	; 0x2226 <LCD_sendCommand+0x530>
		__ticks = 1;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9f 8f       	std	Y+31, r25	; 0x1f
    2222:	8e 8f       	std	Y+30, r24	; 0x1e
    2224:	3f c0       	rjmp	.+126    	; 0x22a4 <LCD_sendCommand+0x5ae>
	else if (__tmp > 65535)
    2226:	68 a1       	ldd	r22, Y+32	; 0x20
    2228:	79 a1       	ldd	r23, Y+33	; 0x21
    222a:	8a a1       	ldd	r24, Y+34	; 0x22
    222c:	9b a1       	ldd	r25, Y+35	; 0x23
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	3f ef       	ldi	r19, 0xFF	; 255
    2232:	4f e7       	ldi	r20, 0x7F	; 127
    2234:	57 e4       	ldi	r21, 0x47	; 71
    2236:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    223a:	18 16       	cp	r1, r24
    223c:	4c f5       	brge	.+82     	; 0x2290 <LCD_sendCommand+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223e:	6c a1       	ldd	r22, Y+36	; 0x24
    2240:	7d a1       	ldd	r23, Y+37	; 0x25
    2242:	8e a1       	ldd	r24, Y+38	; 0x26
    2244:	9f a1       	ldd	r25, Y+39	; 0x27
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e2       	ldi	r20, 0x20	; 32
    224c:	51 e4       	ldi	r21, 0x41	; 65
    224e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9f 8f       	std	Y+31, r25	; 0x1f
    2264:	8e 8f       	std	Y+30, r24	; 0x1e
    2266:	0f c0       	rjmp	.+30     	; 0x2286 <LCD_sendCommand+0x590>
    2268:	88 ec       	ldi	r24, 0xC8	; 200
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9d 8f       	std	Y+29, r25	; 0x1d
    226e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2270:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2272:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <LCD_sendCommand+0x57e>
    2278:	9d 8f       	std	Y+29, r25	; 0x1d
    227a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    227e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	9f 8f       	std	Y+31, r25	; 0x1f
    2284:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2286:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2288:	9f 8d       	ldd	r25, Y+31	; 0x1f
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	69 f7       	brne	.-38     	; 0x2268 <LCD_sendCommand+0x572>
    228e:	24 c0       	rjmp	.+72     	; 0x22d8 <LCD_sendCommand+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2290:	68 a1       	ldd	r22, Y+32	; 0x20
    2292:	79 a1       	ldd	r23, Y+33	; 0x21
    2294:	8a a1       	ldd	r24, Y+34	; 0x22
    2296:	9b a1       	ldd	r25, Y+35	; 0x23
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9f 8f       	std	Y+31, r25	; 0x1f
    22a2:	8e 8f       	std	Y+30, r24	; 0x1e
    22a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22a8:	9b 8f       	std	Y+27, r25	; 0x1b
    22aa:	8a 8f       	std	Y+26, r24	; 0x1a
    22ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_sendCommand+0x5ba>
    22b4:	9b 8f       	std	Y+27, r25	; 0x1b
    22b6:	8a 8f       	std	Y+26, r24	; 0x1a
    22b8:	0f c0       	rjmp	.+30     	; 0x22d8 <LCD_sendCommand+0x5e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22ba:	69 a5       	ldd	r22, Y+41	; 0x29
    22bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    22be:	8b a5       	ldd	r24, Y+43	; 0x2b
    22c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	88 a7       	std	Y+40, r24	; 0x28
    22cc:	88 a5       	ldd	r24, Y+40	; 0x28
    22ce:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22d0:	89 8d       	ldd	r24, Y+25	; 0x19
    22d2:	8a 95       	dec	r24
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <LCD_sendCommand+0x5dc>
    22d6:	89 8f       	std	Y+25, r24	; 0x19
#endif
	_delay_us(1);                          /* Delay tdsw =100 ns minimum */
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E);        /* Clear E */
    22d8:	a2 e3       	ldi	r26, 0x32	; 50
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	e2 e3       	ldi	r30, 0x32	; 50
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	8f 77       	andi	r24, 0x7F	; 127
    22e4:	8c 93       	st	X, r24
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a0 e8       	ldi	r26, 0x80	; 128
    22ec:	bf e3       	ldi	r27, 0x3F	; 63
    22ee:	8d 8b       	std	Y+21, r24	; 0x15
    22f0:	9e 8b       	std	Y+22, r25	; 0x16
    22f2:	af 8b       	std	Y+23, r26	; 0x17
    22f4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22f6:	6d 89       	ldd	r22, Y+21	; 0x15
    22f8:	7e 89       	ldd	r23, Y+22	; 0x16
    22fa:	8f 89       	ldd	r24, Y+23	; 0x17
    22fc:	98 8d       	ldd	r25, Y+24	; 0x18
    22fe:	2b ea       	ldi	r18, 0xAB	; 171
    2300:	3a ea       	ldi	r19, 0xAA	; 170
    2302:	4a e2       	ldi	r20, 0x2A	; 42
    2304:	50 e4       	ldi	r21, 0x40	; 64
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	89 8b       	std	Y+17, r24	; 0x11
    2310:	9a 8b       	std	Y+18, r25	; 0x12
    2312:	ab 8b       	std	Y+19, r26	; 0x13
    2314:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2316:	69 89       	ldd	r22, Y+17	; 0x11
    2318:	7a 89       	ldd	r23, Y+18	; 0x12
    231a:	8b 89       	ldd	r24, Y+19	; 0x13
    231c:	9c 89       	ldd	r25, Y+20	; 0x14
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e8       	ldi	r20, 0x80	; 128
    2324:	5f e3       	ldi	r21, 0x3F	; 63
    2326:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    232a:	88 23       	and	r24, r24
    232c:	1c f4       	brge	.+6      	; 0x2334 <LCD_sendCommand+0x63e>
		__ticks = 1;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	88 8b       	std	Y+16, r24	; 0x10
    2332:	91 c0       	rjmp	.+290    	; 0x2456 <LCD_sendCommand+0x760>
	else if (__tmp > 255)
    2334:	69 89       	ldd	r22, Y+17	; 0x11
    2336:	7a 89       	ldd	r23, Y+18	; 0x12
    2338:	8b 89       	ldd	r24, Y+19	; 0x13
    233a:	9c 89       	ldd	r25, Y+20	; 0x14
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	4f e7       	ldi	r20, 0x7F	; 127
    2342:	53 e4       	ldi	r21, 0x43	; 67
    2344:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2348:	18 16       	cp	r1, r24
    234a:	0c f0       	brlt	.+2      	; 0x234e <LCD_sendCommand+0x658>
    234c:	7b c0       	rjmp	.+246    	; 0x2444 <LCD_sendCommand+0x74e>
	{
		_delay_ms(__us / 1000.0);
    234e:	6d 89       	ldd	r22, Y+21	; 0x15
    2350:	7e 89       	ldd	r23, Y+22	; 0x16
    2352:	8f 89       	ldd	r24, Y+23	; 0x17
    2354:	98 8d       	ldd	r25, Y+24	; 0x18
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	4a e7       	ldi	r20, 0x7A	; 122
    235c:	54 e4       	ldi	r21, 0x44	; 68
    235e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	8c 87       	std	Y+12, r24	; 0x0c
    2368:	9d 87       	std	Y+13, r25	; 0x0d
    236a:	ae 87       	std	Y+14, r26	; 0x0e
    236c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2370:	7d 85       	ldd	r23, Y+13	; 0x0d
    2372:	8e 85       	ldd	r24, Y+14	; 0x0e
    2374:	9f 85       	ldd	r25, Y+15	; 0x0f
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	4a ef       	ldi	r20, 0xFA	; 250
    237c:	54 e4       	ldi	r21, 0x44	; 68
    237e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	88 87       	std	Y+8, r24	; 0x08
    2388:	99 87       	std	Y+9, r25	; 0x09
    238a:	aa 87       	std	Y+10, r26	; 0x0a
    238c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    238e:	68 85       	ldd	r22, Y+8	; 0x08
    2390:	79 85       	ldd	r23, Y+9	; 0x09
    2392:	8a 85       	ldd	r24, Y+10	; 0x0a
    2394:	9b 85       	ldd	r25, Y+11	; 0x0b
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e8       	ldi	r20, 0x80	; 128
    239c:	5f e3       	ldi	r21, 0x3F	; 63
    239e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23a2:	88 23       	and	r24, r24
    23a4:	2c f4       	brge	.+10     	; 0x23b0 <LCD_sendCommand+0x6ba>
		__ticks = 1;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9f 83       	std	Y+7, r25	; 0x07
    23ac:	8e 83       	std	Y+6, r24	; 0x06
    23ae:	3f c0       	rjmp	.+126    	; 0x242e <LCD_sendCommand+0x738>
	else if (__tmp > 65535)
    23b0:	68 85       	ldd	r22, Y+8	; 0x08
    23b2:	79 85       	ldd	r23, Y+9	; 0x09
    23b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    23b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	3f ef       	ldi	r19, 0xFF	; 255
    23bc:	4f e7       	ldi	r20, 0x7F	; 127
    23be:	57 e4       	ldi	r21, 0x47	; 71
    23c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c4:	18 16       	cp	r1, r24
    23c6:	4c f5       	brge	.+82     	; 0x241a <LCD_sendCommand+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    23ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    23cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    23ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 e2       	ldi	r20, 0x20	; 32
    23d6:	51 e4       	ldi	r21, 0x41	; 65
    23d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	bc 01       	movw	r22, r24
    23e2:	cd 01       	movw	r24, r26
    23e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	9f 83       	std	Y+7, r25	; 0x07
    23ee:	8e 83       	std	Y+6, r24	; 0x06
    23f0:	0f c0       	rjmp	.+30     	; 0x2410 <LCD_sendCommand+0x71a>
    23f2:	88 ec       	ldi	r24, 0xC8	; 200
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	9d 83       	std	Y+5, r25	; 0x05
    23f8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23fa:	8c 81       	ldd	r24, Y+4	; 0x04
    23fc:	9d 81       	ldd	r25, Y+5	; 0x05
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	f1 f7       	brne	.-4      	; 0x23fe <LCD_sendCommand+0x708>
    2402:	9d 83       	std	Y+5, r25	; 0x05
    2404:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2406:	8e 81       	ldd	r24, Y+6	; 0x06
    2408:	9f 81       	ldd	r25, Y+7	; 0x07
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	9f 83       	std	Y+7, r25	; 0x07
    240e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2410:	8e 81       	ldd	r24, Y+6	; 0x06
    2412:	9f 81       	ldd	r25, Y+7	; 0x07
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	69 f7       	brne	.-38     	; 0x23f2 <LCD_sendCommand+0x6fc>
    2418:	24 c0       	rjmp	.+72     	; 0x2462 <LCD_sendCommand+0x76c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241a:	68 85       	ldd	r22, Y+8	; 0x08
    241c:	79 85       	ldd	r23, Y+9	; 0x09
    241e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2420:	9b 85       	ldd	r25, Y+11	; 0x0b
    2422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	9f 83       	std	Y+7, r25	; 0x07
    242c:	8e 83       	std	Y+6, r24	; 0x06
    242e:	8e 81       	ldd	r24, Y+6	; 0x06
    2430:	9f 81       	ldd	r25, Y+7	; 0x07
    2432:	9b 83       	std	Y+3, r25	; 0x03
    2434:	8a 83       	std	Y+2, r24	; 0x02
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	9b 81       	ldd	r25, Y+3	; 0x03
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <LCD_sendCommand+0x744>
    243e:	9b 83       	std	Y+3, r25	; 0x03
    2440:	8a 83       	std	Y+2, r24	; 0x02
    2442:	0f c0       	rjmp	.+30     	; 0x2462 <LCD_sendCommand+0x76c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2444:	69 89       	ldd	r22, Y+17	; 0x11
    2446:	7a 89       	ldd	r23, Y+18	; 0x12
    2448:	8b 89       	ldd	r24, Y+19	; 0x13
    244a:	9c 89       	ldd	r25, Y+20	; 0x14
    244c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	88 8b       	std	Y+16, r24	; 0x10
    2456:	88 89       	ldd	r24, Y+16	; 0x10
    2458:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	8a 95       	dec	r24
    245e:	f1 f7       	brne	.-4      	; 0x245c <LCD_sendCommand+0x766>
    2460:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);                          /* Delay th(hold time) = 13 ns minimum */
}
    2462:	cf 59       	subi	r28, 0x9F	; 159
    2464:	df 4f       	sbci	r29, 0xFF	; 255
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	cd bf       	out	0x3d, r28	; 61
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	1f 91       	pop	r17
    2476:	0f 91       	pop	r16
    2478:	08 95       	ret

0000247a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    247a:	0f 93       	push	r16
    247c:	1f 93       	push	r17
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	c1 56       	subi	r28, 0x61	; 97
    2488:	d0 40       	sbci	r29, 0x00	; 0
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
    2494:	fe 01       	movw	r30, r28
    2496:	ef 59       	subi	r30, 0x9F	; 159
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT_OUT,RS);         /* Clear RS for sending data */
    249c:	a2 e3       	ldi	r26, 0x32	; 50
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e2 e3       	ldi	r30, 0x32	; 50
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	80 62       	ori	r24, 0x20	; 32
    24a8:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RW);       /* Clear RW for Writing */
    24aa:	a2 e3       	ldi	r26, 0x32	; 50
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e2 e3       	ldi	r30, 0x32	; 50
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	8f 7b       	andi	r24, 0xBF	; 191
    24b6:	8c 93       	st	X, r24
    24b8:	fe 01       	movw	r30, r28
    24ba:	e3 5a       	subi	r30, 0xA3	; 163
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	a0 e8       	ldi	r26, 0x80	; 128
    24c4:	bf e3       	ldi	r27, 0x3F	; 63
    24c6:	80 83       	st	Z, r24
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	a2 83       	std	Z+2, r26	; 0x02
    24cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24ce:	8e 01       	movw	r16, r28
    24d0:	07 5a       	subi	r16, 0xA7	; 167
    24d2:	1f 4f       	sbci	r17, 0xFF	; 255
    24d4:	fe 01       	movw	r30, r28
    24d6:	e3 5a       	subi	r30, 0xA3	; 163
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
    24e2:	2b ea       	ldi	r18, 0xAB	; 171
    24e4:	3a ea       	ldi	r19, 0xAA	; 170
    24e6:	4a e2       	ldi	r20, 0x2A	; 42
    24e8:	50 e4       	ldi	r21, 0x40	; 64
    24ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	f8 01       	movw	r30, r16
    24f4:	80 83       	st	Z, r24
    24f6:	91 83       	std	Z+1, r25	; 0x01
    24f8:	a2 83       	std	Z+2, r26	; 0x02
    24fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24fc:	fe 01       	movw	r30, r28
    24fe:	e7 5a       	subi	r30, 0xA7	; 167
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	60 81       	ld	r22, Z
    2504:	71 81       	ldd	r23, Z+1	; 0x01
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e8       	ldi	r20, 0x80	; 128
    2510:	5f e3       	ldi	r21, 0x3F	; 63
    2512:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2516:	88 23       	and	r24, r24
    2518:	34 f4       	brge	.+12     	; 0x2526 <LCD_displayCharacter+0xac>
		__ticks = 1;
    251a:	fe 01       	movw	r30, r28
    251c:	e8 5a       	subi	r30, 0xA8	; 168
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	80 83       	st	Z, r24
    2524:	e0 c0       	rjmp	.+448    	; 0x26e6 <LCD_displayCharacter+0x26c>
	else if (__tmp > 255)
    2526:	fe 01       	movw	r30, r28
    2528:	e7 5a       	subi	r30, 0xA7	; 167
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	60 81       	ld	r22, Z
    252e:	71 81       	ldd	r23, Z+1	; 0x01
    2530:	82 81       	ldd	r24, Z+2	; 0x02
    2532:	93 81       	ldd	r25, Z+3	; 0x03
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	53 e4       	ldi	r21, 0x43	; 67
    253c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	0c f0       	brlt	.+2      	; 0x2546 <LCD_displayCharacter+0xcc>
    2544:	c0 c0       	rjmp	.+384    	; 0x26c6 <LCD_displayCharacter+0x24c>
	{
		_delay_ms(__us / 1000.0);
    2546:	fe 01       	movw	r30, r28
    2548:	e3 5a       	subi	r30, 0xA3	; 163
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	4a e7       	ldi	r20, 0x7A	; 122
    255a:	54 e4       	ldi	r21, 0x44	; 68
    255c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	fe 01       	movw	r30, r28
    2566:	ec 5a       	subi	r30, 0xAC	; 172
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	80 83       	st	Z, r24
    256c:	91 83       	std	Z+1, r25	; 0x01
    256e:	a2 83       	std	Z+2, r26	; 0x02
    2570:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2572:	8e 01       	movw	r16, r28
    2574:	00 5b       	subi	r16, 0xB0	; 176
    2576:	1f 4f       	sbci	r17, 0xFF	; 255
    2578:	fe 01       	movw	r30, r28
    257a:	ec 5a       	subi	r30, 0xAC	; 172
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	60 81       	ld	r22, Z
    2580:	71 81       	ldd	r23, Z+1	; 0x01
    2582:	82 81       	ldd	r24, Z+2	; 0x02
    2584:	93 81       	ldd	r25, Z+3	; 0x03
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	4a ef       	ldi	r20, 0xFA	; 250
    258c:	54 e4       	ldi	r21, 0x44	; 68
    258e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	f8 01       	movw	r30, r16
    2598:	80 83       	st	Z, r24
    259a:	91 83       	std	Z+1, r25	; 0x01
    259c:	a2 83       	std	Z+2, r26	; 0x02
    259e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25a0:	fe 01       	movw	r30, r28
    25a2:	e0 5b       	subi	r30, 0xB0	; 176
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	60 81       	ld	r22, Z
    25a8:	71 81       	ldd	r23, Z+1	; 0x01
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	93 81       	ldd	r25, Z+3	; 0x03
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e8       	ldi	r20, 0x80	; 128
    25b4:	5f e3       	ldi	r21, 0x3F	; 63
    25b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ba:	88 23       	and	r24, r24
    25bc:	44 f4       	brge	.+16     	; 0x25ce <LCD_displayCharacter+0x154>
		__ticks = 1;
    25be:	fe 01       	movw	r30, r28
    25c0:	e2 5b       	subi	r30, 0xB2	; 178
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	80 83       	st	Z, r24
    25cc:	64 c0       	rjmp	.+200    	; 0x2696 <LCD_displayCharacter+0x21c>
	else if (__tmp > 65535)
    25ce:	fe 01       	movw	r30, r28
    25d0:	e0 5b       	subi	r30, 0xB0	; 176
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	60 81       	ld	r22, Z
    25d6:	71 81       	ldd	r23, Z+1	; 0x01
    25d8:	82 81       	ldd	r24, Z+2	; 0x02
    25da:	93 81       	ldd	r25, Z+3	; 0x03
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	3f ef       	ldi	r19, 0xFF	; 255
    25e0:	4f e7       	ldi	r20, 0x7F	; 127
    25e2:	57 e4       	ldi	r21, 0x47	; 71
    25e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25e8:	18 16       	cp	r1, r24
    25ea:	0c f0       	brlt	.+2      	; 0x25ee <LCD_displayCharacter+0x174>
    25ec:	43 c0       	rjmp	.+134    	; 0x2674 <LCD_displayCharacter+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	fe 01       	movw	r30, r28
    25f0:	ec 5a       	subi	r30, 0xAC	; 172
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	60 81       	ld	r22, Z
    25f6:	71 81       	ldd	r23, Z+1	; 0x01
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e2       	ldi	r20, 0x20	; 32
    2602:	51 e4       	ldi	r21, 0x41	; 65
    2604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	8e 01       	movw	r16, r28
    260e:	02 5b       	subi	r16, 0xB2	; 178
    2610:	1f 4f       	sbci	r17, 0xFF	; 255
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	f8 01       	movw	r30, r16
    2620:	91 83       	std	Z+1, r25	; 0x01
    2622:	80 83       	st	Z, r24
    2624:	1f c0       	rjmp	.+62     	; 0x2664 <LCD_displayCharacter+0x1ea>
    2626:	fe 01       	movw	r30, r28
    2628:	e4 5b       	subi	r30, 0xB4	; 180
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	88 ec       	ldi	r24, 0xC8	; 200
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	91 83       	std	Z+1, r25	; 0x01
    2632:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2634:	fe 01       	movw	r30, r28
    2636:	e4 5b       	subi	r30, 0xB4	; 180
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_displayCharacter+0x1c4>
    2642:	fe 01       	movw	r30, r28
    2644:	e4 5b       	subi	r30, 0xB4	; 180
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264c:	de 01       	movw	r26, r28
    264e:	a2 5b       	subi	r26, 0xB2	; 178
    2650:	bf 4f       	sbci	r27, 0xFF	; 255
    2652:	fe 01       	movw	r30, r28
    2654:	e2 5b       	subi	r30, 0xB2	; 178
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 81       	ld	r24, Z
    265a:	91 81       	ldd	r25, Z+1	; 0x01
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	11 96       	adiw	r26, 0x01	; 1
    2660:	9c 93       	st	X, r25
    2662:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2664:	fe 01       	movw	r30, r28
    2666:	e2 5b       	subi	r30, 0xB2	; 178
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	91 81       	ldd	r25, Z+1	; 0x01
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	d1 f6       	brne	.-76     	; 0x2626 <LCD_displayCharacter+0x1ac>
    2672:	4b c0       	rjmp	.+150    	; 0x270a <LCD_displayCharacter+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2674:	8e 01       	movw	r16, r28
    2676:	02 5b       	subi	r16, 0xB2	; 178
    2678:	1f 4f       	sbci	r17, 0xFF	; 255
    267a:	fe 01       	movw	r30, r28
    267c:	e0 5b       	subi	r30, 0xB0	; 176
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	f8 01       	movw	r30, r16
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	80 83       	st	Z, r24
    2696:	de 01       	movw	r26, r28
    2698:	a6 5b       	subi	r26, 0xB6	; 182
    269a:	bf 4f       	sbci	r27, 0xFF	; 255
    269c:	fe 01       	movw	r30, r28
    269e:	e2 5b       	subi	r30, 0xB2	; 178
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	80 81       	ld	r24, Z
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	11 96       	adiw	r26, 0x01	; 1
    26a8:	9c 93       	st	X, r25
    26aa:	8e 93       	st	-X, r24
    26ac:	fe 01       	movw	r30, r28
    26ae:	e6 5b       	subi	r30, 0xB6	; 182
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	91 81       	ldd	r25, Z+1	; 0x01
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <LCD_displayCharacter+0x23c>
    26ba:	fe 01       	movw	r30, r28
    26bc:	e6 5b       	subi	r30, 0xB6	; 182
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	80 83       	st	Z, r24
    26c4:	22 c0       	rjmp	.+68     	; 0x270a <LCD_displayCharacter+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26c6:	8e 01       	movw	r16, r28
    26c8:	08 5a       	subi	r16, 0xA8	; 168
    26ca:	1f 4f       	sbci	r17, 0xFF	; 255
    26cc:	fe 01       	movw	r30, r28
    26ce:	e7 5a       	subi	r30, 0xA7	; 167
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	f8 01       	movw	r30, r16
    26e4:	80 83       	st	Z, r24
    26e6:	de 01       	movw	r26, r28
    26e8:	a7 5b       	subi	r26, 0xB7	; 183
    26ea:	bf 4f       	sbci	r27, 0xFF	; 255
    26ec:	fe 01       	movw	r30, r28
    26ee:	e8 5a       	subi	r30, 0xA8	; 168
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 81       	ld	r24, Z
    26f4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26f6:	fe 01       	movw	r30, r28
    26f8:	e7 5b       	subi	r30, 0xB7	; 183
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	8a 95       	dec	r24
    2700:	f1 f7       	brne	.-4      	; 0x26fe <LCD_displayCharacter+0x284>
    2702:	fe 01       	movw	r30, r28
    2704:	e7 5b       	subi	r30, 0xB7	; 183
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 83       	st	Z, r24
	_delay_us(1);                          /* Delay tas(address set up time tas= 50 ns minimum)  */
	SET_BIT(LCD_CTRL_PORT_OUT,E);          /* Set E */
    270a:	a2 e3       	ldi	r26, 0x32	; 50
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e2 e3       	ldi	r30, 0x32	; 50
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	80 68       	ori	r24, 0x80	; 128
    2716:	8c 93       	st	X, r24
    2718:	fe 01       	movw	r30, r28
    271a:	eb 5b       	subi	r30, 0xBB	; 187
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	a0 e8       	ldi	r26, 0x80	; 128
    2724:	bf e3       	ldi	r27, 0x3F	; 63
    2726:	80 83       	st	Z, r24
    2728:	91 83       	std	Z+1, r25	; 0x01
    272a:	a2 83       	std	Z+2, r26	; 0x02
    272c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    272e:	8e 01       	movw	r16, r28
    2730:	0f 5b       	subi	r16, 0xBF	; 191
    2732:	1f 4f       	sbci	r17, 0xFF	; 255
    2734:	fe 01       	movw	r30, r28
    2736:	eb 5b       	subi	r30, 0xBB	; 187
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	2b ea       	ldi	r18, 0xAB	; 171
    2744:	3a ea       	ldi	r19, 0xAA	; 170
    2746:	4a e2       	ldi	r20, 0x2A	; 42
    2748:	50 e4       	ldi	r21, 0x40	; 64
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	f8 01       	movw	r30, r16
    2754:	80 83       	st	Z, r24
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	a2 83       	std	Z+2, r26	; 0x02
    275a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    275c:	fe 01       	movw	r30, r28
    275e:	ef 5b       	subi	r30, 0xBF	; 191
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	60 81       	ld	r22, Z
    2764:	71 81       	ldd	r23, Z+1	; 0x01
    2766:	82 81       	ldd	r24, Z+2	; 0x02
    2768:	93 81       	ldd	r25, Z+3	; 0x03
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e8       	ldi	r20, 0x80	; 128
    2770:	5f e3       	ldi	r21, 0x3F	; 63
    2772:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2776:	88 23       	and	r24, r24
    2778:	34 f4       	brge	.+12     	; 0x2786 <LCD_displayCharacter+0x30c>
		__ticks = 1;
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	fe 01       	movw	r30, r28
    277e:	e0 5c       	subi	r30, 0xC0	; 192
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 83       	st	Z, r24
    2784:	9d c0       	rjmp	.+314    	; 0x28c0 <LCD_displayCharacter+0x446>
	else if (__tmp > 255)
    2786:	fe 01       	movw	r30, r28
    2788:	ef 5b       	subi	r30, 0xBF	; 191
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	60 81       	ld	r22, Z
    278e:	71 81       	ldd	r23, Z+1	; 0x01
    2790:	82 81       	ldd	r24, Z+2	; 0x02
    2792:	93 81       	ldd	r25, Z+3	; 0x03
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	53 e4       	ldi	r21, 0x43	; 67
    279c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a0:	18 16       	cp	r1, r24
    27a2:	0c f0       	brlt	.+2      	; 0x27a6 <LCD_displayCharacter+0x32c>
    27a4:	7e c0       	rjmp	.+252    	; 0x28a2 <LCD_displayCharacter+0x428>
	{
		_delay_ms(__us / 1000.0);
    27a6:	fe 01       	movw	r30, r28
    27a8:	eb 5b       	subi	r30, 0xBB	; 187
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	60 81       	ld	r22, Z
    27ae:	71 81       	ldd	r23, Z+1	; 0x01
    27b0:	82 81       	ldd	r24, Z+2	; 0x02
    27b2:	93 81       	ldd	r25, Z+3	; 0x03
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	4a e7       	ldi	r20, 0x7A	; 122
    27ba:	54 e4       	ldi	r21, 0x44	; 68
    27bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	8c af       	std	Y+60, r24	; 0x3c
    27c6:	9d af       	std	Y+61, r25	; 0x3d
    27c8:	ae af       	std	Y+62, r26	; 0x3e
    27ca:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27cc:	6c ad       	ldd	r22, Y+60	; 0x3c
    27ce:	7d ad       	ldd	r23, Y+61	; 0x3d
    27d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    27d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	4a ef       	ldi	r20, 0xFA	; 250
    27da:	54 e4       	ldi	r21, 0x44	; 68
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	88 af       	std	Y+56, r24	; 0x38
    27e6:	99 af       	std	Y+57, r25	; 0x39
    27e8:	aa af       	std	Y+58, r26	; 0x3a
    27ea:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    27ec:	68 ad       	ldd	r22, Y+56	; 0x38
    27ee:	79 ad       	ldd	r23, Y+57	; 0x39
    27f0:	8a ad       	ldd	r24, Y+58	; 0x3a
    27f2:	9b ad       	ldd	r25, Y+59	; 0x3b
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2800:	88 23       	and	r24, r24
    2802:	2c f4       	brge	.+10     	; 0x280e <LCD_displayCharacter+0x394>
		__ticks = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9f ab       	std	Y+55, r25	; 0x37
    280a:	8e ab       	std	Y+54, r24	; 0x36
    280c:	3f c0       	rjmp	.+126    	; 0x288c <LCD_displayCharacter+0x412>
	else if (__tmp > 65535)
    280e:	68 ad       	ldd	r22, Y+56	; 0x38
    2810:	79 ad       	ldd	r23, Y+57	; 0x39
    2812:	8a ad       	ldd	r24, Y+58	; 0x3a
    2814:	9b ad       	ldd	r25, Y+59	; 0x3b
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	3f ef       	ldi	r19, 0xFF	; 255
    281a:	4f e7       	ldi	r20, 0x7F	; 127
    281c:	57 e4       	ldi	r21, 0x47	; 71
    281e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2822:	18 16       	cp	r1, r24
    2824:	4c f5       	brge	.+82     	; 0x2878 <LCD_displayCharacter+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2826:	6c ad       	ldd	r22, Y+60	; 0x3c
    2828:	7d ad       	ldd	r23, Y+61	; 0x3d
    282a:	8e ad       	ldd	r24, Y+62	; 0x3e
    282c:	9f ad       	ldd	r25, Y+63	; 0x3f
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e2       	ldi	r20, 0x20	; 32
    2834:	51 e4       	ldi	r21, 0x41	; 65
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9f ab       	std	Y+55, r25	; 0x37
    284c:	8e ab       	std	Y+54, r24	; 0x36
    284e:	0f c0       	rjmp	.+30     	; 0x286e <LCD_displayCharacter+0x3f4>
    2850:	88 ec       	ldi	r24, 0xC8	; 200
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9d ab       	std	Y+53, r25	; 0x35
    2856:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2858:	8c a9       	ldd	r24, Y+52	; 0x34
    285a:	9d a9       	ldd	r25, Y+53	; 0x35
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <LCD_displayCharacter+0x3e2>
    2860:	9d ab       	std	Y+53, r25	; 0x35
    2862:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2864:	8e a9       	ldd	r24, Y+54	; 0x36
    2866:	9f a9       	ldd	r25, Y+55	; 0x37
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	9f ab       	std	Y+55, r25	; 0x37
    286c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286e:	8e a9       	ldd	r24, Y+54	; 0x36
    2870:	9f a9       	ldd	r25, Y+55	; 0x37
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	69 f7       	brne	.-38     	; 0x2850 <LCD_displayCharacter+0x3d6>
    2876:	2d c0       	rjmp	.+90     	; 0x28d2 <LCD_displayCharacter+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2878:	68 ad       	ldd	r22, Y+56	; 0x38
    287a:	79 ad       	ldd	r23, Y+57	; 0x39
    287c:	8a ad       	ldd	r24, Y+58	; 0x3a
    287e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	9f ab       	std	Y+55, r25	; 0x37
    288a:	8e ab       	std	Y+54, r24	; 0x36
    288c:	8e a9       	ldd	r24, Y+54	; 0x36
    288e:	9f a9       	ldd	r25, Y+55	; 0x37
    2890:	9b ab       	std	Y+51, r25	; 0x33
    2892:	8a ab       	std	Y+50, r24	; 0x32
    2894:	8a a9       	ldd	r24, Y+50	; 0x32
    2896:	9b a9       	ldd	r25, Y+51	; 0x33
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <LCD_displayCharacter+0x41e>
    289c:	9b ab       	std	Y+51, r25	; 0x33
    289e:	8a ab       	std	Y+50, r24	; 0x32
    28a0:	18 c0       	rjmp	.+48     	; 0x28d2 <LCD_displayCharacter+0x458>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28a2:	fe 01       	movw	r30, r28
    28a4:	ef 5b       	subi	r30, 0xBF	; 191
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	60 81       	ld	r22, Z
    28aa:	71 81       	ldd	r23, Z+1	; 0x01
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	93 81       	ldd	r25, Z+3	; 0x03
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	fe 01       	movw	r30, r28
    28ba:	e0 5c       	subi	r30, 0xC0	; 192
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	80 83       	st	Z, r24
    28c0:	fe 01       	movw	r30, r28
    28c2:	e0 5c       	subi	r30, 0xC0	; 192
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	80 81       	ld	r24, Z
    28c8:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28ca:	89 a9       	ldd	r24, Y+49	; 0x31
    28cc:	8a 95       	dec	r24
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <LCD_displayCharacter+0x452>
    28d0:	89 ab       	std	Y+49, r24	; 0x31
     LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & (~ 0X0F)) |((data & 0X0F));
  #elif (PORT_PINS_SELECTION  == 1)
     LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & (~ 0XF0)) | ((data & 0X0F) <<4);
  #endif
#elif(KEYPAD_BITS_MODE == 8)
	 LCD_DATA_PORT_OUT = data;             /* Write data to output port */
    28d2:	a5 e3       	ldi	r26, 0x35	; 53
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	fe 01       	movw	r30, r28
    28d8:	ef 59       	subi	r30, 0x9F	; 159
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	80 81       	ld	r24, Z
    28de:	8c 93       	st	X, r24
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a0 e8       	ldi	r26, 0x80	; 128
    28e6:	bf e3       	ldi	r27, 0x3F	; 63
    28e8:	8d a7       	std	Y+45, r24	; 0x2d
    28ea:	9e a7       	std	Y+46, r25	; 0x2e
    28ec:	af a7       	std	Y+47, r26	; 0x2f
    28ee:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28f0:	6d a5       	ldd	r22, Y+45	; 0x2d
    28f2:	7e a5       	ldd	r23, Y+46	; 0x2e
    28f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f6:	98 a9       	ldd	r25, Y+48	; 0x30
    28f8:	2b ea       	ldi	r18, 0xAB	; 171
    28fa:	3a ea       	ldi	r19, 0xAA	; 170
    28fc:	4a e2       	ldi	r20, 0x2A	; 42
    28fe:	50 e4       	ldi	r21, 0x40	; 64
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	89 a7       	std	Y+41, r24	; 0x29
    290a:	9a a7       	std	Y+42, r25	; 0x2a
    290c:	ab a7       	std	Y+43, r26	; 0x2b
    290e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2910:	69 a5       	ldd	r22, Y+41	; 0x29
    2912:	7a a5       	ldd	r23, Y+42	; 0x2a
    2914:	8b a5       	ldd	r24, Y+43	; 0x2b
    2916:	9c a5       	ldd	r25, Y+44	; 0x2c
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e8       	ldi	r20, 0x80	; 128
    291e:	5f e3       	ldi	r21, 0x3F	; 63
    2920:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2924:	88 23       	and	r24, r24
    2926:	1c f4       	brge	.+6      	; 0x292e <LCD_displayCharacter+0x4b4>
		__ticks = 1;
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	88 a7       	std	Y+40, r24	; 0x28
    292c:	91 c0       	rjmp	.+290    	; 0x2a50 <LCD_displayCharacter+0x5d6>
	else if (__tmp > 255)
    292e:	69 a5       	ldd	r22, Y+41	; 0x29
    2930:	7a a5       	ldd	r23, Y+42	; 0x2a
    2932:	8b a5       	ldd	r24, Y+43	; 0x2b
    2934:	9c a5       	ldd	r25, Y+44	; 0x2c
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	4f e7       	ldi	r20, 0x7F	; 127
    293c:	53 e4       	ldi	r21, 0x43	; 67
    293e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2942:	18 16       	cp	r1, r24
    2944:	0c f0       	brlt	.+2      	; 0x2948 <LCD_displayCharacter+0x4ce>
    2946:	7b c0       	rjmp	.+246    	; 0x2a3e <LCD_displayCharacter+0x5c4>
	{
		_delay_ms(__us / 1000.0);
    2948:	6d a5       	ldd	r22, Y+45	; 0x2d
    294a:	7e a5       	ldd	r23, Y+46	; 0x2e
    294c:	8f a5       	ldd	r24, Y+47	; 0x2f
    294e:	98 a9       	ldd	r25, Y+48	; 0x30
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	4a e7       	ldi	r20, 0x7A	; 122
    2956:	54 e4       	ldi	r21, 0x44	; 68
    2958:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	8c a3       	std	Y+36, r24	; 0x24
    2962:	9d a3       	std	Y+37, r25	; 0x25
    2964:	ae a3       	std	Y+38, r26	; 0x26
    2966:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2968:	6c a1       	ldd	r22, Y+36	; 0x24
    296a:	7d a1       	ldd	r23, Y+37	; 0x25
    296c:	8e a1       	ldd	r24, Y+38	; 0x26
    296e:	9f a1       	ldd	r25, Y+39	; 0x27
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	4a ef       	ldi	r20, 0xFA	; 250
    2976:	54 e4       	ldi	r21, 0x44	; 68
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	88 a3       	std	Y+32, r24	; 0x20
    2982:	99 a3       	std	Y+33, r25	; 0x21
    2984:	aa a3       	std	Y+34, r26	; 0x22
    2986:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2988:	68 a1       	ldd	r22, Y+32	; 0x20
    298a:	79 a1       	ldd	r23, Y+33	; 0x21
    298c:	8a a1       	ldd	r24, Y+34	; 0x22
    298e:	9b a1       	ldd	r25, Y+35	; 0x23
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e8       	ldi	r20, 0x80	; 128
    2996:	5f e3       	ldi	r21, 0x3F	; 63
    2998:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    299c:	88 23       	and	r24, r24
    299e:	2c f4       	brge	.+10     	; 0x29aa <LCD_displayCharacter+0x530>
		__ticks = 1;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9f 8f       	std	Y+31, r25	; 0x1f
    29a6:	8e 8f       	std	Y+30, r24	; 0x1e
    29a8:	3f c0       	rjmp	.+126    	; 0x2a28 <LCD_displayCharacter+0x5ae>
	else if (__tmp > 65535)
    29aa:	68 a1       	ldd	r22, Y+32	; 0x20
    29ac:	79 a1       	ldd	r23, Y+33	; 0x21
    29ae:	8a a1       	ldd	r24, Y+34	; 0x22
    29b0:	9b a1       	ldd	r25, Y+35	; 0x23
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	3f ef       	ldi	r19, 0xFF	; 255
    29b6:	4f e7       	ldi	r20, 0x7F	; 127
    29b8:	57 e4       	ldi	r21, 0x47	; 71
    29ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29be:	18 16       	cp	r1, r24
    29c0:	4c f5       	brge	.+82     	; 0x2a14 <LCD_displayCharacter+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c2:	6c a1       	ldd	r22, Y+36	; 0x24
    29c4:	7d a1       	ldd	r23, Y+37	; 0x25
    29c6:	8e a1       	ldd	r24, Y+38	; 0x26
    29c8:	9f a1       	ldd	r25, Y+39	; 0x27
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e2       	ldi	r20, 0x20	; 32
    29d0:	51 e4       	ldi	r21, 0x41	; 65
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	bc 01       	movw	r22, r24
    29dc:	cd 01       	movw	r24, r26
    29de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	9f 8f       	std	Y+31, r25	; 0x1f
    29e8:	8e 8f       	std	Y+30, r24	; 0x1e
    29ea:	0f c0       	rjmp	.+30     	; 0x2a0a <LCD_displayCharacter+0x590>
    29ec:	88 ec       	ldi	r24, 0xC8	; 200
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	9d 8f       	std	Y+29, r25	; 0x1d
    29f2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <LCD_displayCharacter+0x57e>
    29fc:	9d 8f       	std	Y+29, r25	; 0x1d
    29fe:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a02:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	9f 8f       	std	Y+31, r25	; 0x1f
    2a08:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a0c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	69 f7       	brne	.-38     	; 0x29ec <LCD_displayCharacter+0x572>
    2a12:	24 c0       	rjmp	.+72     	; 0x2a5c <LCD_displayCharacter+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a14:	68 a1       	ldd	r22, Y+32	; 0x20
    2a16:	79 a1       	ldd	r23, Y+33	; 0x21
    2a18:	8a a1       	ldd	r24, Y+34	; 0x22
    2a1a:	9b a1       	ldd	r25, Y+35	; 0x23
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	9f 8f       	std	Y+31, r25	; 0x1f
    2a26:	8e 8f       	std	Y+30, r24	; 0x1e
    2a28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a2a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a2c:	9b 8f       	std	Y+27, r25	; 0x1b
    2a2e:	8a 8f       	std	Y+26, r24	; 0x1a
    2a30:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a32:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <LCD_displayCharacter+0x5ba>
    2a38:	9b 8f       	std	Y+27, r25	; 0x1b
    2a3a:	8a 8f       	std	Y+26, r24	; 0x1a
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <LCD_displayCharacter+0x5e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a3e:	69 a5       	ldd	r22, Y+41	; 0x29
    2a40:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a42:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a44:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	88 a7       	std	Y+40, r24	; 0x28
    2a50:	88 a5       	ldd	r24, Y+40	; 0x28
    2a52:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a54:	89 8d       	ldd	r24, Y+25	; 0x19
    2a56:	8a 95       	dec	r24
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <LCD_displayCharacter+0x5dc>
    2a5a:	89 8f       	std	Y+25, r24	; 0x19
#endif
	_delay_us(1);                          /* Delay tdsw =100 ns minimum */
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E);        /* Clear E */
    2a5c:	a2 e3       	ldi	r26, 0x32	; 50
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e2 e3       	ldi	r30, 0x32	; 50
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	8f 77       	andi	r24, 0x7F	; 127
    2a68:	8c 93       	st	X, r24
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	a0 e8       	ldi	r26, 0x80	; 128
    2a70:	bf e3       	ldi	r27, 0x3F	; 63
    2a72:	8d 8b       	std	Y+21, r24	; 0x15
    2a74:	9e 8b       	std	Y+22, r25	; 0x16
    2a76:	af 8b       	std	Y+23, r26	; 0x17
    2a78:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a80:	98 8d       	ldd	r25, Y+24	; 0x18
    2a82:	2b ea       	ldi	r18, 0xAB	; 171
    2a84:	3a ea       	ldi	r19, 0xAA	; 170
    2a86:	4a e2       	ldi	r20, 0x2A	; 42
    2a88:	50 e4       	ldi	r21, 0x40	; 64
    2a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	89 8b       	std	Y+17, r24	; 0x11
    2a94:	9a 8b       	std	Y+18, r25	; 0x12
    2a96:	ab 8b       	std	Y+19, r26	; 0x13
    2a98:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a9a:	69 89       	ldd	r22, Y+17	; 0x11
    2a9c:	7a 89       	ldd	r23, Y+18	; 0x12
    2a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa0:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	5f e3       	ldi	r21, 0x3F	; 63
    2aaa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aae:	88 23       	and	r24, r24
    2ab0:	1c f4       	brge	.+6      	; 0x2ab8 <LCD_displayCharacter+0x63e>
		__ticks = 1;
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	88 8b       	std	Y+16, r24	; 0x10
    2ab6:	91 c0       	rjmp	.+290    	; 0x2bda <LCD_displayCharacter+0x760>
	else if (__tmp > 255)
    2ab8:	69 89       	ldd	r22, Y+17	; 0x11
    2aba:	7a 89       	ldd	r23, Y+18	; 0x12
    2abc:	8b 89       	ldd	r24, Y+19	; 0x13
    2abe:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	4f e7       	ldi	r20, 0x7F	; 127
    2ac6:	53 e4       	ldi	r21, 0x43	; 67
    2ac8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2acc:	18 16       	cp	r1, r24
    2ace:	0c f0       	brlt	.+2      	; 0x2ad2 <LCD_displayCharacter+0x658>
    2ad0:	7b c0       	rjmp	.+246    	; 0x2bc8 <LCD_displayCharacter+0x74e>
	{
		_delay_ms(__us / 1000.0);
    2ad2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad8:	98 8d       	ldd	r25, Y+24	; 0x18
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	4a e7       	ldi	r20, 0x7A	; 122
    2ae0:	54 e4       	ldi	r21, 0x44	; 68
    2ae2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	8c 87       	std	Y+12, r24	; 0x0c
    2aec:	9d 87       	std	Y+13, r25	; 0x0d
    2aee:	ae 87       	std	Y+14, r26	; 0x0e
    2af0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2af4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2af6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2af8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	4a ef       	ldi	r20, 0xFA	; 250
    2b00:	54 e4       	ldi	r21, 0x44	; 68
    2b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	88 87       	std	Y+8, r24	; 0x08
    2b0c:	99 87       	std	Y+9, r25	; 0x09
    2b0e:	aa 87       	std	Y+10, r26	; 0x0a
    2b10:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b12:	68 85       	ldd	r22, Y+8	; 0x08
    2b14:	79 85       	ldd	r23, Y+9	; 0x09
    2b16:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b18:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e8       	ldi	r20, 0x80	; 128
    2b20:	5f e3       	ldi	r21, 0x3F	; 63
    2b22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b26:	88 23       	and	r24, r24
    2b28:	2c f4       	brge	.+10     	; 0x2b34 <LCD_displayCharacter+0x6ba>
		__ticks = 1;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	9f 83       	std	Y+7, r25	; 0x07
    2b30:	8e 83       	std	Y+6, r24	; 0x06
    2b32:	3f c0       	rjmp	.+126    	; 0x2bb2 <LCD_displayCharacter+0x738>
	else if (__tmp > 65535)
    2b34:	68 85       	ldd	r22, Y+8	; 0x08
    2b36:	79 85       	ldd	r23, Y+9	; 0x09
    2b38:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	3f ef       	ldi	r19, 0xFF	; 255
    2b40:	4f e7       	ldi	r20, 0x7F	; 127
    2b42:	57 e4       	ldi	r21, 0x47	; 71
    2b44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b48:	18 16       	cp	r1, r24
    2b4a:	4c f5       	brge	.+82     	; 0x2b9e <LCD_displayCharacter+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b50:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b52:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e2       	ldi	r20, 0x20	; 32
    2b5a:	51 e4       	ldi	r21, 0x41	; 65
    2b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	bc 01       	movw	r22, r24
    2b66:	cd 01       	movw	r24, r26
    2b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	9f 83       	std	Y+7, r25	; 0x07
    2b72:	8e 83       	std	Y+6, r24	; 0x06
    2b74:	0f c0       	rjmp	.+30     	; 0x2b94 <LCD_displayCharacter+0x71a>
    2b76:	88 ec       	ldi	r24, 0xC8	; 200
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	9d 83       	std	Y+5, r25	; 0x05
    2b7c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b80:	9d 81       	ldd	r25, Y+5	; 0x05
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <LCD_displayCharacter+0x708>
    2b86:	9d 83       	std	Y+5, r25	; 0x05
    2b88:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b8c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	9f 83       	std	Y+7, r25	; 0x07
    2b92:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b94:	8e 81       	ldd	r24, Y+6	; 0x06
    2b96:	9f 81       	ldd	r25, Y+7	; 0x07
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	69 f7       	brne	.-38     	; 0x2b76 <LCD_displayCharacter+0x6fc>
    2b9c:	24 c0       	rjmp	.+72     	; 0x2be6 <LCD_displayCharacter+0x76c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9e:	68 85       	ldd	r22, Y+8	; 0x08
    2ba0:	79 85       	ldd	r23, Y+9	; 0x09
    2ba2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ba4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	9f 83       	std	Y+7, r25	; 0x07
    2bb0:	8e 83       	std	Y+6, r24	; 0x06
    2bb2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb4:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb6:	9b 83       	std	Y+3, r25	; 0x03
    2bb8:	8a 83       	std	Y+2, r24	; 0x02
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <LCD_displayCharacter+0x744>
    2bc2:	9b 83       	std	Y+3, r25	; 0x03
    2bc4:	8a 83       	std	Y+2, r24	; 0x02
    2bc6:	0f c0       	rjmp	.+30     	; 0x2be6 <LCD_displayCharacter+0x76c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bc8:	69 89       	ldd	r22, Y+17	; 0x11
    2bca:	7a 89       	ldd	r23, Y+18	; 0x12
    2bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bce:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	88 8b       	std	Y+16, r24	; 0x10
    2bda:	88 89       	ldd	r24, Y+16	; 0x10
    2bdc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	8a 95       	dec	r24
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <LCD_displayCharacter+0x766>
    2be4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);                          /* Delay th(hold time) = 13 ns minimum */
}
    2be6:	cf 59       	subi	r28, 0x9F	; 159
    2be8:	df 4f       	sbci	r29, 0xFF	; 255
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	1f 91       	pop	r17
    2bfa:	0f 91       	pop	r16
    2bfc:	08 95       	ret

00002bfe <LCD_displayString>:

void LCD_displayString(const char *str)
{
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <LCD_displayString+0x6>
    2c04:	0f 92       	push	r0
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	9b 83       	std	Y+3, r25	; 0x03
    2c0c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2c0e:	19 82       	std	Y+1, r1	; 0x01
    2c10:	0e c0       	rjmp	.+28     	; 0x2c2e <LCD_displayString+0x30>
	while(str[i]!='\0')
	{
		LCD_displayCharacter(str[i]);
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	28 2f       	mov	r18, r24
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	e2 0f       	add	r30, r18
    2c20:	f3 1f       	adc	r31, r19
    2c22:	80 81       	ld	r24, Z
    2c24:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_displayCharacter>
		i++;
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	8f 5f       	subi	r24, 0xFF	; 255
    2c2c:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	uint8 i=0;
	while(str[i]!='\0')
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
    2c30:	28 2f       	mov	r18, r24
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	8a 81       	ldd	r24, Y+2	; 0x02
    2c36:	9b 81       	ldd	r25, Y+3	; 0x03
    2c38:	fc 01       	movw	r30, r24
    2c3a:	e2 0f       	add	r30, r18
    2c3c:	f3 1f       	adc	r31, r19
    2c3e:	80 81       	ld	r24, Z
    2c40:	88 23       	and	r24, r24
    2c42:	39 f7       	brne	.-50     	; 0x2c12 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <LCD_displayInteger>:


void LCD_displayInteger(sint32 num)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	64 97       	sbiw	r28, 0x14	; 20
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	69 8b       	std	Y+17, r22	; 0x11
    2c66:	7a 8b       	std	Y+18, r23	; 0x12
    2c68:	8b 8b       	std	Y+19, r24	; 0x13
    2c6a:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16];
	itoa(num,buff,10);             /*function to convert decimal number to ASCII code and store it in buff  */
    2c6c:	89 89       	ldd	r24, Y+17	; 0x11
    2c6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2c70:	9e 01       	movw	r18, r28
    2c72:	2f 5f       	subi	r18, 0xFF	; 255
    2c74:	3f 4f       	sbci	r19, 0xFF	; 255
    2c76:	b9 01       	movw	r22, r18
    2c78:	4a e0       	ldi	r20, 0x0A	; 10
    2c7a:	50 e0       	ldi	r21, 0x00	; 0
    2c7c:	0e 94 80 1a 	call	0x3500	; 0x3500 <itoa>
	LCD_displayString(buff);       /*Display string */
    2c80:	ce 01       	movw	r24, r28
    2c82:	01 96       	adiw	r24, 0x01	; 1
    2c84:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_displayString>
}
    2c88:	64 96       	adiw	r28, 0x14	; 20
    2c8a:	0f b6       	in	r0, 0x3f	; 63
    2c8c:	f8 94       	cli
    2c8e:	de bf       	out	0x3e, r29	; 62
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	cd bf       	out	0x3d, r28	; 61
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	08 95       	ret

00002c9a <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2c9a:	df 93       	push	r29
    2c9c:	cf 93       	push	r28
    2c9e:	00 d0       	rcall	.+0      	; 0x2ca0 <LCD_goToRowColumn+0x6>
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <LCD_goToRowColumn+0x8>
    2ca2:	0f 92       	push	r0
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    2ca8:	8a 83       	std	Y+2, r24	; 0x02
    2caa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	/* Calculate the address of cursor   */
	switch(row)
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	3d 83       	std	Y+5, r19	; 0x05
    2cb4:	2c 83       	std	Y+4, r18	; 0x04
    2cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    2cba:	81 30       	cpi	r24, 0x01	; 1
    2cbc:	91 05       	cpc	r25, r1
    2cbe:	c1 f0       	breq	.+48     	; 0x2cf0 <LCD_goToRowColumn+0x56>
    2cc0:	2c 81       	ldd	r18, Y+4	; 0x04
    2cc2:	3d 81       	ldd	r19, Y+5	; 0x05
    2cc4:	22 30       	cpi	r18, 0x02	; 2
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	2c f4       	brge	.+10     	; 0x2cd4 <LCD_goToRowColumn+0x3a>
    2cca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	61 f0       	breq	.+24     	; 0x2cea <LCD_goToRowColumn+0x50>
    2cd2:	1a c0       	rjmp	.+52     	; 0x2d08 <LCD_goToRowColumn+0x6e>
    2cd4:	2c 81       	ldd	r18, Y+4	; 0x04
    2cd6:	3d 81       	ldd	r19, Y+5	; 0x05
    2cd8:	22 30       	cpi	r18, 0x02	; 2
    2cda:	31 05       	cpc	r19, r1
    2cdc:	69 f0       	breq	.+26     	; 0x2cf8 <LCD_goToRowColumn+0x5e>
    2cde:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce2:	83 30       	cpi	r24, 0x03	; 3
    2ce4:	91 05       	cpc	r25, r1
    2ce6:	61 f0       	breq	.+24     	; 0x2d00 <LCD_goToRowColumn+0x66>
    2ce8:	0f c0       	rjmp	.+30     	; 0x2d08 <LCD_goToRowColumn+0x6e>
	{
	  case 0:
		  address=0x00+col;
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	0e c0       	rjmp	.+28     	; 0x2d0c <LCD_goToRowColumn+0x72>
		  break;
	  case 1:
		  address=0x40+col;
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	80 5c       	subi	r24, 0xC0	; 192
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    2cf6:	0a c0       	rjmp	.+20     	; 0x2d0c <LCD_goToRowColumn+0x72>
		  break;
	  case 2:
		  address=0x10+col;
    2cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfa:	80 5f       	subi	r24, 0xF0	; 240
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    2cfe:	06 c0       	rjmp	.+12     	; 0x2d0c <LCD_goToRowColumn+0x72>
		  break;
	  case 3:
		  address=0x50+col;
    2d00:	8b 81       	ldd	r24, Y+3	; 0x03
    2d02:	80 5b       	subi	r24, 0xB0	; 176
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <LCD_goToRowColumn+0x72>
		  break;
	  default:
		  address=0x00+col;  /* row 0 if row number is wrong  */
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_sendCommand(SET_CURSOR_LOCATION | address); /*send command to move cursor to required position */
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	80 68       	ori	r24, 0x80	; 128
    2d10:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
}
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	08 95       	ret

00002d24 <LCD_clearScreen>:


void LCD_clearScreen(void)
{
    2d24:	df 93       	push	r29
    2d26:	cf 93       	push	r28
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
}
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	08 95       	ret

00002d38 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *str)
{
    2d38:	df 93       	push	r29
    2d3a:	cf 93       	push	r28
    2d3c:	00 d0       	rcall	.+0      	; 0x2d3e <LCD_displayStringRowColumn+0x6>
    2d3e:	00 d0       	rcall	.+0      	; 0x2d40 <LCD_displayStringRowColumn+0x8>
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	6a 83       	std	Y+2, r22	; 0x02
    2d48:	5c 83       	std	Y+4, r21	; 0x04
    2d4a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col);   /* go to required position */
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	6a 81       	ldd	r22, Y+2	; 0x02
    2d50:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <LCD_goToRowColumn>
	LCD_displayString(str);       /* display string   */
    2d54:	8b 81       	ldd	r24, Y+3	; 0x03
    2d56:	9c 81       	ldd	r25, Y+4	; 0x04
    2d58:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_displayString>
}
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	cf 91       	pop	r28
    2d66:	df 91       	pop	r29
    2d68:	08 95       	ret

00002d6a <__vector_9>:
 *                   Interrupt Service Routines                    *
 *******************************************************************/

/************************TIMER0*************************************/
ISR(TIMER0_OVF_vect)  /* ISR of Normal Mode */
{
    2d6a:	1f 92       	push	r1
    2d6c:	0f 92       	push	r0
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	0f 92       	push	r0
    2d72:	11 24       	eor	r1, r1
    2d74:	2f 93       	push	r18
    2d76:	3f 93       	push	r19
    2d78:	4f 93       	push	r20
    2d7a:	5f 93       	push	r21
    2d7c:	6f 93       	push	r22
    2d7e:	7f 93       	push	r23
    2d80:	8f 93       	push	r24
    2d82:	9f 93       	push	r25
    2d84:	af 93       	push	r26
    2d86:	bf 93       	push	r27
    2d88:	ef 93       	push	r30
    2d8a:	ff 93       	push	r31
    2d8c:	df 93       	push	r29
    2d8e:	cf 93       	push	r28
    2d90:	cd b7       	in	r28, 0x3d	; 61
    2d92:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    2d94:	80 91 5f 01 	lds	r24, 0x015F
    2d98:	90 91 60 01 	lds	r25, 0x0160
    2d9c:	00 97       	sbiw	r24, 0x00	; 0
    2d9e:	29 f0       	breq	.+10     	; 0x2daa <__vector_9+0x40>
	{
		(*g_callBackPtr0)();  /* Call call back function */
    2da0:	e0 91 5f 01 	lds	r30, 0x015F
    2da4:	f0 91 60 01 	lds	r31, 0x0160
    2da8:	09 95       	icall
	}
}
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	ff 91       	pop	r31
    2db0:	ef 91       	pop	r30
    2db2:	bf 91       	pop	r27
    2db4:	af 91       	pop	r26
    2db6:	9f 91       	pop	r25
    2db8:	8f 91       	pop	r24
    2dba:	7f 91       	pop	r23
    2dbc:	6f 91       	pop	r22
    2dbe:	5f 91       	pop	r21
    2dc0:	4f 91       	pop	r20
    2dc2:	3f 91       	pop	r19
    2dc4:	2f 91       	pop	r18
    2dc6:	0f 90       	pop	r0
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	0f 90       	pop	r0
    2dcc:	1f 90       	pop	r1
    2dce:	18 95       	reti

00002dd0 <__vector_19>:

ISR(TIMER0_COMP_vect)  /* ISR of CTC Mode */
{
    2dd0:	1f 92       	push	r1
    2dd2:	0f 92       	push	r0
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	0f 92       	push	r0
    2dd8:	11 24       	eor	r1, r1
    2dda:	2f 93       	push	r18
    2ddc:	3f 93       	push	r19
    2dde:	4f 93       	push	r20
    2de0:	5f 93       	push	r21
    2de2:	6f 93       	push	r22
    2de4:	7f 93       	push	r23
    2de6:	8f 93       	push	r24
    2de8:	9f 93       	push	r25
    2dea:	af 93       	push	r26
    2dec:	bf 93       	push	r27
    2dee:	ef 93       	push	r30
    2df0:	ff 93       	push	r31
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    2dfa:	80 91 5f 01 	lds	r24, 0x015F
    2dfe:	90 91 60 01 	lds	r25, 0x0160
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	29 f0       	breq	.+10     	; 0x2e10 <__vector_19+0x40>
	{
		(*g_callBackPtr0)();  /* Call call back function */
    2e06:	e0 91 5f 01 	lds	r30, 0x015F
    2e0a:	f0 91 60 01 	lds	r31, 0x0160
    2e0e:	09 95       	icall
	}
}
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	ff 91       	pop	r31
    2e16:	ef 91       	pop	r30
    2e18:	bf 91       	pop	r27
    2e1a:	af 91       	pop	r26
    2e1c:	9f 91       	pop	r25
    2e1e:	8f 91       	pop	r24
    2e20:	7f 91       	pop	r23
    2e22:	6f 91       	pop	r22
    2e24:	5f 91       	pop	r21
    2e26:	4f 91       	pop	r20
    2e28:	3f 91       	pop	r19
    2e2a:	2f 91       	pop	r18
    2e2c:	0f 90       	pop	r0
    2e2e:	0f be       	out	0x3f, r0	; 63
    2e30:	0f 90       	pop	r0
    2e32:	1f 90       	pop	r1
    2e34:	18 95       	reti

00002e36 <__vector_8>:


/************************TIMER1*************************************/
ISR(TIMER1_OVF_vect)  /* ISR of Normal Mode */
{
    2e36:	1f 92       	push	r1
    2e38:	0f 92       	push	r0
    2e3a:	0f b6       	in	r0, 0x3f	; 63
    2e3c:	0f 92       	push	r0
    2e3e:	11 24       	eor	r1, r1
    2e40:	2f 93       	push	r18
    2e42:	3f 93       	push	r19
    2e44:	4f 93       	push	r20
    2e46:	5f 93       	push	r21
    2e48:	6f 93       	push	r22
    2e4a:	7f 93       	push	r23
    2e4c:	8f 93       	push	r24
    2e4e:	9f 93       	push	r25
    2e50:	af 93       	push	r26
    2e52:	bf 93       	push	r27
    2e54:	ef 93       	push	r30
    2e56:	ff 93       	push	r31
    2e58:	df 93       	push	r29
    2e5a:	cf 93       	push	r28
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    2e60:	80 91 61 01 	lds	r24, 0x0161
    2e64:	90 91 62 01 	lds	r25, 0x0162
    2e68:	00 97       	sbiw	r24, 0x00	; 0
    2e6a:	29 f0       	breq	.+10     	; 0x2e76 <__vector_8+0x40>
	{
		(*g_callBackPtr1)();  /* Call call back function */
    2e6c:	e0 91 61 01 	lds	r30, 0x0161
    2e70:	f0 91 62 01 	lds	r31, 0x0162
    2e74:	09 95       	icall
	}
}
    2e76:	cf 91       	pop	r28
    2e78:	df 91       	pop	r29
    2e7a:	ff 91       	pop	r31
    2e7c:	ef 91       	pop	r30
    2e7e:	bf 91       	pop	r27
    2e80:	af 91       	pop	r26
    2e82:	9f 91       	pop	r25
    2e84:	8f 91       	pop	r24
    2e86:	7f 91       	pop	r23
    2e88:	6f 91       	pop	r22
    2e8a:	5f 91       	pop	r21
    2e8c:	4f 91       	pop	r20
    2e8e:	3f 91       	pop	r19
    2e90:	2f 91       	pop	r18
    2e92:	0f 90       	pop	r0
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	0f 90       	pop	r0
    2e98:	1f 90       	pop	r1
    2e9a:	18 95       	reti

00002e9c <__vector_6>:
ISR(TIMER1_COMPA_vect)  /* ISR of CTC Mode */
{
    2e9c:	1f 92       	push	r1
    2e9e:	0f 92       	push	r0
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	0f 92       	push	r0
    2ea4:	11 24       	eor	r1, r1
    2ea6:	2f 93       	push	r18
    2ea8:	3f 93       	push	r19
    2eaa:	4f 93       	push	r20
    2eac:	5f 93       	push	r21
    2eae:	6f 93       	push	r22
    2eb0:	7f 93       	push	r23
    2eb2:	8f 93       	push	r24
    2eb4:	9f 93       	push	r25
    2eb6:	af 93       	push	r26
    2eb8:	bf 93       	push	r27
    2eba:	ef 93       	push	r30
    2ebc:	ff 93       	push	r31
    2ebe:	df 93       	push	r29
    2ec0:	cf 93       	push	r28
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    2ec6:	80 91 61 01 	lds	r24, 0x0161
    2eca:	90 91 62 01 	lds	r25, 0x0162
    2ece:	00 97       	sbiw	r24, 0x00	; 0
    2ed0:	29 f0       	breq	.+10     	; 0x2edc <__vector_6+0x40>
	{
		(*g_callBackPtr1)();  /* Call call back function */
    2ed2:	e0 91 61 01 	lds	r30, 0x0161
    2ed6:	f0 91 62 01 	lds	r31, 0x0162
    2eda:	09 95       	icall
	}
}
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	ff 91       	pop	r31
    2ee2:	ef 91       	pop	r30
    2ee4:	bf 91       	pop	r27
    2ee6:	af 91       	pop	r26
    2ee8:	9f 91       	pop	r25
    2eea:	8f 91       	pop	r24
    2eec:	7f 91       	pop	r23
    2eee:	6f 91       	pop	r22
    2ef0:	5f 91       	pop	r21
    2ef2:	4f 91       	pop	r20
    2ef4:	3f 91       	pop	r19
    2ef6:	2f 91       	pop	r18
    2ef8:	0f 90       	pop	r0
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	0f 90       	pop	r0
    2efe:	1f 90       	pop	r1
    2f00:	18 95       	reti

00002f02 <__vector_4>:


/************************TIMER2*************************************/
ISR(TIMER2_OVF_vect)  /* ISR of Normal Mode */
{
    2f02:	1f 92       	push	r1
    2f04:	0f 92       	push	r0
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	0f 92       	push	r0
    2f0a:	11 24       	eor	r1, r1
    2f0c:	2f 93       	push	r18
    2f0e:	3f 93       	push	r19
    2f10:	4f 93       	push	r20
    2f12:	5f 93       	push	r21
    2f14:	6f 93       	push	r22
    2f16:	7f 93       	push	r23
    2f18:	8f 93       	push	r24
    2f1a:	9f 93       	push	r25
    2f1c:	af 93       	push	r26
    2f1e:	bf 93       	push	r27
    2f20:	ef 93       	push	r30
    2f22:	ff 93       	push	r31
    2f24:	df 93       	push	r29
    2f26:	cf 93       	push	r28
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    2f2c:	80 91 63 01 	lds	r24, 0x0163
    2f30:	90 91 64 01 	lds	r25, 0x0164
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	29 f0       	breq	.+10     	; 0x2f42 <__vector_4+0x40>
	{
		(*g_callBackPtr2)();  /* Call call back function */
    2f38:	e0 91 63 01 	lds	r30, 0x0163
    2f3c:	f0 91 64 01 	lds	r31, 0x0164
    2f40:	09 95       	icall
	}
}
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	ff 91       	pop	r31
    2f48:	ef 91       	pop	r30
    2f4a:	bf 91       	pop	r27
    2f4c:	af 91       	pop	r26
    2f4e:	9f 91       	pop	r25
    2f50:	8f 91       	pop	r24
    2f52:	7f 91       	pop	r23
    2f54:	6f 91       	pop	r22
    2f56:	5f 91       	pop	r21
    2f58:	4f 91       	pop	r20
    2f5a:	3f 91       	pop	r19
    2f5c:	2f 91       	pop	r18
    2f5e:	0f 90       	pop	r0
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	0f 90       	pop	r0
    2f64:	1f 90       	pop	r1
    2f66:	18 95       	reti

00002f68 <__vector_3>:
ISR(TIMER2_COMP_vect)  /* ISR of CTC Mode */
{
    2f68:	1f 92       	push	r1
    2f6a:	0f 92       	push	r0
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	0f 92       	push	r0
    2f70:	11 24       	eor	r1, r1
    2f72:	2f 93       	push	r18
    2f74:	3f 93       	push	r19
    2f76:	4f 93       	push	r20
    2f78:	5f 93       	push	r21
    2f7a:	6f 93       	push	r22
    2f7c:	7f 93       	push	r23
    2f7e:	8f 93       	push	r24
    2f80:	9f 93       	push	r25
    2f82:	af 93       	push	r26
    2f84:	bf 93       	push	r27
    2f86:	ef 93       	push	r30
    2f88:	ff 93       	push	r31
    2f8a:	df 93       	push	r29
    2f8c:	cf 93       	push	r28
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    2f92:	80 91 63 01 	lds	r24, 0x0163
    2f96:	90 91 64 01 	lds	r25, 0x0164
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	29 f0       	breq	.+10     	; 0x2fa8 <__vector_3+0x40>
	{
		(*g_callBackPtr2)();  /* Call call back function */
    2f9e:	e0 91 63 01 	lds	r30, 0x0163
    2fa2:	f0 91 64 01 	lds	r31, 0x0164
    2fa6:	09 95       	icall
	}
}
    2fa8:	cf 91       	pop	r28
    2faa:	df 91       	pop	r29
    2fac:	ff 91       	pop	r31
    2fae:	ef 91       	pop	r30
    2fb0:	bf 91       	pop	r27
    2fb2:	af 91       	pop	r26
    2fb4:	9f 91       	pop	r25
    2fb6:	8f 91       	pop	r24
    2fb8:	7f 91       	pop	r23
    2fba:	6f 91       	pop	r22
    2fbc:	5f 91       	pop	r21
    2fbe:	4f 91       	pop	r20
    2fc0:	3f 91       	pop	r19
    2fc2:	2f 91       	pop	r18
    2fc4:	0f 90       	pop	r0
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	0f 90       	pop	r0
    2fca:	1f 90       	pop	r1
    2fcc:	18 95       	reti

00002fce <TIMER_init>:

/******************************************************************
 *                                 Functions Definitions          *
 ******************************************************************/
void TIMER_init(T_Config *config)
{
    2fce:	df 93       	push	r29
    2fd0:	cf 93       	push	r28
    2fd2:	00 d0       	rcall	.+0      	; 0x2fd4 <TIMER_init+0x6>
    2fd4:	00 d0       	rcall	.+0      	; 0x2fd6 <TIMER_init+0x8>
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	9a 83       	std	Y+2, r25	; 0x02
    2fdc:	89 83       	std	Y+1, r24	; 0x01
	switch (config->channel)
    2fde:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe2:	80 81       	ld	r24, Z
    2fe4:	28 2f       	mov	r18, r24
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	3c 83       	std	Y+4, r19	; 0x04
    2fea:	2b 83       	std	Y+3, r18	; 0x03
    2fec:	8b 81       	ldd	r24, Y+3	; 0x03
    2fee:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff0:	81 30       	cpi	r24, 0x01	; 1
    2ff2:	91 05       	cpc	r25, r1
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <TIMER_init+0x2a>
    2ff6:	51 c0       	rjmp	.+162    	; 0x309a <TIMER_init+0xcc>
    2ff8:	2b 81       	ldd	r18, Y+3	; 0x03
    2ffa:	3c 81       	ldd	r19, Y+4	; 0x04
    2ffc:	22 30       	cpi	r18, 0x02	; 2
    2ffe:	31 05       	cpc	r19, r1
    3000:	09 f4       	brne	.+2      	; 0x3004 <TIMER_init+0x36>
    3002:	9e c0       	rjmp	.+316    	; 0x3140 <TIMER_init+0x172>
    3004:	8b 81       	ldd	r24, Y+3	; 0x03
    3006:	9c 81       	ldd	r25, Y+4	; 0x04
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	09 f0       	breq	.+2      	; 0x300e <TIMER_init+0x40>
    300c:	de c0       	rjmp	.+444    	; 0x31ca <TIMER_init+0x1fc>
	{
	case TIMER0:
		SET_BIT(TCCR0,FOC0);  /* Set FOC0 for Non PWM mode  */
    300e:	a3 e5       	ldi	r26, 0x53	; 83
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	e3 e5       	ldi	r30, 0x53	; 83
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	80 81       	ld	r24, Z
    3018:	80 68       	ori	r24, 0x80	; 128
    301a:	8c 93       	st	X, r24
		if(config->mode==NORMAL)  /* configure timer 0 normal mode and enable interrupt and CPU pre-scaler */
    301c:	e9 81       	ldd	r30, Y+1	; 0x01
    301e:	fa 81       	ldd	r31, Y+2	; 0x02
    3020:	81 81       	ldd	r24, Z+1	; 0x01
    3022:	88 23       	and	r24, r24
    3024:	79 f4       	brne	.+30     	; 0x3044 <TIMER_init+0x76>
		{
			SET_BIT(TIMSK,TOIE0); /*enable interrupt for overflow mode(normal mode )*/
    3026:	a9 e5       	ldi	r26, 0x59	; 89
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	e9 e5       	ldi	r30, 0x59	; 89
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	81 60       	ori	r24, 0x01	; 1
    3032:	8c 93       	st	X, r24
			TCCR0 &= ~0X78;       /* Clear WGM01 WGM00 COM00 COM01 for normal mode */
    3034:	a3 e5       	ldi	r26, 0x53	; 83
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	e3 e5       	ldi	r30, 0x53	; 83
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	87 78       	andi	r24, 0x87	; 135
    3040:	8c 93       	st	X, r24
    3042:	1a c0       	rjmp	.+52     	; 0x3078 <TIMER_init+0xaa>
		}
		else if(config->mode==CTC)
    3044:	e9 81       	ldd	r30, Y+1	; 0x01
    3046:	fa 81       	ldd	r31, Y+2	; 0x02
    3048:	81 81       	ldd	r24, Z+1	; 0x01
    304a:	81 30       	cpi	r24, 0x01	; 1
    304c:	a9 f4       	brne	.+42     	; 0x3078 <TIMER_init+0xaa>
		{
			SET_BIT(TIMSK,OCIE0); /*enable interrupt for CTC mode */
    304e:	a9 e5       	ldi	r26, 0x59	; 89
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	e9 e5       	ldi	r30, 0x59	; 89
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	80 81       	ld	r24, Z
    3058:	82 60       	ori	r24, 0x02	; 2
    305a:	8c 93       	st	X, r24
			TCCR0 |= 0X08;        /* WGM00 0 WGM01 1 Normal CTC Mode */
    305c:	a3 e5       	ldi	r26, 0x53	; 83
    305e:	b0 e0       	ldi	r27, 0x00	; 0
    3060:	e3 e5       	ldi	r30, 0x53	; 83
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	80 81       	ld	r24, Z
    3066:	88 60       	ori	r24, 0x08	; 8
    3068:	8c 93       	st	X, r24
			OCR0 = (uint8)config->compare; /* enter compare value*/
    306a:	ac e5       	ldi	r26, 0x5C	; 92
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	e9 81       	ldd	r30, Y+1	; 0x01
    3070:	fa 81       	ldd	r31, Y+2	; 0x02
    3072:	83 81       	ldd	r24, Z+3	; 0x03
    3074:	94 81       	ldd	r25, Z+4	; 0x04
    3076:	8c 93       	st	X, r24
		}
		TCNT0 =0; /* Clear counter register */
    3078:	e2 e5       	ldi	r30, 0x52	; 82
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	10 82       	st	Z, r1
		TCCR0 =(TCCR0 &(~0X07)) | (config->clock & 0x07); /* configure Pre-scaler */
    307e:	a3 e5       	ldi	r26, 0x53	; 83
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	e3 e5       	ldi	r30, 0x53	; 83
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	98 2f       	mov	r25, r24
    308a:	98 7f       	andi	r25, 0xF8	; 248
    308c:	e9 81       	ldd	r30, Y+1	; 0x01
    308e:	fa 81       	ldd	r31, Y+2	; 0x02
    3090:	82 81       	ldd	r24, Z+2	; 0x02
    3092:	87 70       	andi	r24, 0x07	; 7
    3094:	89 2b       	or	r24, r25
    3096:	8c 93       	st	X, r24
    3098:	98 c0       	rjmp	.+304    	; 0x31ca <TIMER_init+0x1fc>
		break;


	case TIMER1:
		TCCR1A |= ((1<<FOC1A)| (1<< FOC1B));  /* Set bit FOC1A and FOC1B of Non PWM Mode */
    309a:	af e4       	ldi	r26, 0x4F	; 79
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	ef e4       	ldi	r30, 0x4F	; 79
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	8c 60       	ori	r24, 0x0C	; 12
    30a6:	8c 93       	st	X, r24
		if(config->mode == NORMAL)
    30a8:	e9 81       	ldd	r30, Y+1	; 0x01
    30aa:	fa 81       	ldd	r31, Y+2	; 0x02
    30ac:	81 81       	ldd	r24, Z+1	; 0x01
    30ae:	88 23       	and	r24, r24
    30b0:	91 f4       	brne	.+36     	; 0x30d6 <TIMER_init+0x108>
		{
			SET_BIT(TIMSK,TOIE1); /*enable interrupt for overflow mode(normal mode )*/
    30b2:	a9 e5       	ldi	r26, 0x59	; 89
    30b4:	b0 e0       	ldi	r27, 0x00	; 0
    30b6:	e9 e5       	ldi	r30, 0x59	; 89
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	80 81       	ld	r24, Z
    30bc:	84 60       	ori	r24, 0x04	; 4
    30be:	8c 93       	st	X, r24
			/* Configure TIMER1 Normal mode
			 * WGM10:13 =0;
			 * COM All equal zero
			 */
			TCCR1B=0;
    30c0:	ee e4       	ldi	r30, 0x4E	; 78
    30c2:	f0 e0       	ldi	r31, 0x00	; 0
    30c4:	10 82       	st	Z, r1
			TCCR1A &= ~0XF3;
    30c6:	af e4       	ldi	r26, 0x4F	; 79
    30c8:	b0 e0       	ldi	r27, 0x00	; 0
    30ca:	ef e4       	ldi	r30, 0x4F	; 79
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	8c 70       	andi	r24, 0x0C	; 12
    30d2:	8c 93       	st	X, r24
    30d4:	23 c0       	rjmp	.+70     	; 0x311c <TIMER_init+0x14e>
		}
		else if(config->mode ==CTC)
    30d6:	e9 81       	ldd	r30, Y+1	; 0x01
    30d8:	fa 81       	ldd	r31, Y+2	; 0x02
    30da:	81 81       	ldd	r24, Z+1	; 0x01
    30dc:	81 30       	cpi	r24, 0x01	; 1
    30de:	f1 f4       	brne	.+60     	; 0x311c <TIMER_init+0x14e>
		{
			SET_BIT(TIMSK,OCIE1A); /*enable interrupt for CTC channel A*/
    30e0:	a9 e5       	ldi	r26, 0x59	; 89
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	e9 e5       	ldi	r30, 0x59	; 89
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	80 61       	ori	r24, 0x10	; 16
    30ec:	8c 93       	st	X, r24

			/* configure TIMER1 at mode CTC mode 4 i.e WGM12=1 in TCCR1B
			 * COM= 0 normal CTC
			 */
			TCCR1B |= 0X08; /* set bit WGM12 Bit 3*/
    30ee:	ae e4       	ldi	r26, 0x4E	; 78
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	ee e4       	ldi	r30, 0x4E	; 78
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	88 60       	ori	r24, 0x08	; 8
    30fa:	8c 93       	st	X, r24
			TCCR1A &= ~0XF3;
    30fc:	af e4       	ldi	r26, 0x4F	; 79
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	ef e4       	ldi	r30, 0x4F	; 79
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	8c 70       	andi	r24, 0x0C	; 12
    3108:	8c 93       	st	X, r24
			OCR1A = config->compare; /* enter compare value */
    310a:	aa e4       	ldi	r26, 0x4A	; 74
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	e9 81       	ldd	r30, Y+1	; 0x01
    3110:	fa 81       	ldd	r31, Y+2	; 0x02
    3112:	83 81       	ldd	r24, Z+3	; 0x03
    3114:	94 81       	ldd	r25, Z+4	; 0x04
    3116:	11 96       	adiw	r26, 0x01	; 1
    3118:	9c 93       	st	X, r25
    311a:	8e 93       	st	-X, r24
		}
		TCNT1=0;    /* Clear Counter 1 */
    311c:	ec e4       	ldi	r30, 0x4C	; 76
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	11 82       	std	Z+1, r1	; 0x01
    3122:	10 82       	st	Z, r1
		TCCR1B =(TCCR1B &(~0X07)) | (config->clock & 0x07); /* configure Pre-scaler */
    3124:	ae e4       	ldi	r26, 0x4E	; 78
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	ee e4       	ldi	r30, 0x4E	; 78
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	98 2f       	mov	r25, r24
    3130:	98 7f       	andi	r25, 0xF8	; 248
    3132:	e9 81       	ldd	r30, Y+1	; 0x01
    3134:	fa 81       	ldd	r31, Y+2	; 0x02
    3136:	82 81       	ldd	r24, Z+2	; 0x02
    3138:	87 70       	andi	r24, 0x07	; 7
    313a:	89 2b       	or	r24, r25
    313c:	8c 93       	st	X, r24
    313e:	45 c0       	rjmp	.+138    	; 0x31ca <TIMER_init+0x1fc>
		break;

	case TIMER2:
	    SET_BIT(TCCR2,FOC2);  /* Set FOC2 for Non PWM mode  */
    3140:	a5 e4       	ldi	r26, 0x45	; 69
    3142:	b0 e0       	ldi	r27, 0x00	; 0
    3144:	e5 e4       	ldi	r30, 0x45	; 69
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	80 81       	ld	r24, Z
    314a:	80 68       	ori	r24, 0x80	; 128
    314c:	8c 93       	st	X, r24
	    if(config->mode==NORMAL)  /* configure timer 2 normal mode and enable interrupt and CPU pre-scaler */
    314e:	e9 81       	ldd	r30, Y+1	; 0x01
    3150:	fa 81       	ldd	r31, Y+2	; 0x02
    3152:	81 81       	ldd	r24, Z+1	; 0x01
    3154:	88 23       	and	r24, r24
    3156:	79 f4       	brne	.+30     	; 0x3176 <TIMER_init+0x1a8>
	      {
		    SET_BIT(TIMSK,TOIE2); /*enable interrupt for overflow mode(normal mode )*/
    3158:	a9 e5       	ldi	r26, 0x59	; 89
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	e9 e5       	ldi	r30, 0x59	; 89
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	80 64       	ori	r24, 0x40	; 64
    3164:	8c 93       	st	X, r24
		    TCCR2 &= ~0X78;       /* Clear WGM21 WGM20 COM20 COM21 for normal mode */
    3166:	a5 e4       	ldi	r26, 0x45	; 69
    3168:	b0 e0       	ldi	r27, 0x00	; 0
    316a:	e5 e4       	ldi	r30, 0x45	; 69
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 81       	ld	r24, Z
    3170:	87 78       	andi	r24, 0x87	; 135
    3172:	8c 93       	st	X, r24
    3174:	1a c0       	rjmp	.+52     	; 0x31aa <TIMER_init+0x1dc>
	      }
	    else if(config->mode==CTC)
    3176:	e9 81       	ldd	r30, Y+1	; 0x01
    3178:	fa 81       	ldd	r31, Y+2	; 0x02
    317a:	81 81       	ldd	r24, Z+1	; 0x01
    317c:	81 30       	cpi	r24, 0x01	; 1
    317e:	a9 f4       	brne	.+42     	; 0x31aa <TIMER_init+0x1dc>
	     {
		   SET_BIT(TIMSK,OCIE2); /*enable interrupt for CTC mode */
    3180:	a9 e5       	ldi	r26, 0x59	; 89
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	e9 e5       	ldi	r30, 0x59	; 89
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	80 68       	ori	r24, 0x80	; 128
    318c:	8c 93       	st	X, r24
		   TCCR2 |= 0X08;        /* WGM20 0 WGM21 1 Normal CTC Mode */
    318e:	a5 e4       	ldi	r26, 0x45	; 69
    3190:	b0 e0       	ldi	r27, 0x00	; 0
    3192:	e5 e4       	ldi	r30, 0x45	; 69
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	88 60       	ori	r24, 0x08	; 8
    319a:	8c 93       	st	X, r24
		   OCR2 =(uint8) config->compare; /* enter compare value*/
    319c:	a3 e4       	ldi	r26, 0x43	; 67
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	e9 81       	ldd	r30, Y+1	; 0x01
    31a2:	fa 81       	ldd	r31, Y+2	; 0x02
    31a4:	83 81       	ldd	r24, Z+3	; 0x03
    31a6:	94 81       	ldd	r25, Z+4	; 0x04
    31a8:	8c 93       	st	X, r24
	     }
	   TCNT2 =0; /* Clear counter register */
    31aa:	e4 e4       	ldi	r30, 0x44	; 68
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	10 82       	st	Z, r1
	   TCCR2 =(TCCR2 &(~0X07)) | (config->clock & 0x07); /* configure Pre-scaler */
    31b0:	a5 e4       	ldi	r26, 0x45	; 69
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	e5 e4       	ldi	r30, 0x45	; 69
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	98 2f       	mov	r25, r24
    31bc:	98 7f       	andi	r25, 0xF8	; 248
    31be:	e9 81       	ldd	r30, Y+1	; 0x01
    31c0:	fa 81       	ldd	r31, Y+2	; 0x02
    31c2:	82 81       	ldd	r24, Z+2	; 0x02
    31c4:	87 70       	andi	r24, 0x07	; 7
    31c6:	89 2b       	or	r24, r25
    31c8:	8c 93       	st	X, r24
	break;
	}
}
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	cf 91       	pop	r28
    31d4:	df 91       	pop	r29
    31d6:	08 95       	ret

000031d8 <TIMER_setCallBack>:


void TIMER_setCallBack(T_Channel channel,void(*a_ptr)(void))
{
    31d8:	df 93       	push	r29
    31da:	cf 93       	push	r28
    31dc:	00 d0       	rcall	.+0      	; 0x31de <TIMER_setCallBack+0x6>
    31de:	00 d0       	rcall	.+0      	; 0x31e0 <TIMER_setCallBack+0x8>
    31e0:	0f 92       	push	r0
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	89 83       	std	Y+1, r24	; 0x01
    31e8:	7b 83       	std	Y+3, r23	; 0x03
    31ea:	6a 83       	std	Y+2, r22	; 0x02
	switch (channel)
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	28 2f       	mov	r18, r24
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	3d 83       	std	Y+5, r19	; 0x05
    31f4:	2c 83       	std	Y+4, r18	; 0x04
    31f6:	8c 81       	ldd	r24, Y+4	; 0x04
    31f8:	9d 81       	ldd	r25, Y+5	; 0x05
    31fa:	81 30       	cpi	r24, 0x01	; 1
    31fc:	91 05       	cpc	r25, r1
    31fe:	81 f0       	breq	.+32     	; 0x3220 <TIMER_setCallBack+0x48>
    3200:	2c 81       	ldd	r18, Y+4	; 0x04
    3202:	3d 81       	ldd	r19, Y+5	; 0x05
    3204:	22 30       	cpi	r18, 0x02	; 2
    3206:	31 05       	cpc	r19, r1
    3208:	91 f0       	breq	.+36     	; 0x322e <TIMER_setCallBack+0x56>
    320a:	8c 81       	ldd	r24, Y+4	; 0x04
    320c:	9d 81       	ldd	r25, Y+5	; 0x05
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	a1 f4       	brne	.+40     	; 0x323a <TIMER_setCallBack+0x62>
	{
	case TIMER0:
		g_callBackPtr0 = a_ptr; /* store pointer of set call back function */
    3212:	8a 81       	ldd	r24, Y+2	; 0x02
    3214:	9b 81       	ldd	r25, Y+3	; 0x03
    3216:	90 93 60 01 	sts	0x0160, r25
    321a:	80 93 5f 01 	sts	0x015F, r24
    321e:	0d c0       	rjmp	.+26     	; 0x323a <TIMER_setCallBack+0x62>
		break;
	case TIMER1:
		g_callBackPtr1 = a_ptr;
    3220:	8a 81       	ldd	r24, Y+2	; 0x02
    3222:	9b 81       	ldd	r25, Y+3	; 0x03
    3224:	90 93 62 01 	sts	0x0162, r25
    3228:	80 93 61 01 	sts	0x0161, r24
    322c:	06 c0       	rjmp	.+12     	; 0x323a <TIMER_setCallBack+0x62>
		break;
	case TIMER2:
		g_callBackPtr2 = a_ptr;
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	9b 81       	ldd	r25, Y+3	; 0x03
    3232:	90 93 64 01 	sts	0x0164, r25
    3236:	80 93 63 01 	sts	0x0163, r24
		break;
	}
}
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	08 95       	ret

0000324a <TIMER_deInit>:

void TIMER_deInit(T_Channel channel)
{
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	00 d0       	rcall	.+0      	; 0x3250 <TIMER_deInit+0x6>
    3250:	0f 92       	push	r0
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	89 83       	std	Y+1, r24	; 0x01
	switch (channel)
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	28 2f       	mov	r18, r24
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	3b 83       	std	Y+3, r19	; 0x03
    3260:	2a 83       	std	Y+2, r18	; 0x02
    3262:	8a 81       	ldd	r24, Y+2	; 0x02
    3264:	9b 81       	ldd	r25, Y+3	; 0x03
    3266:	81 30       	cpi	r24, 0x01	; 1
    3268:	91 05       	cpc	r25, r1
    326a:	d1 f0       	breq	.+52     	; 0x32a0 <TIMER_deInit+0x56>
    326c:	2a 81       	ldd	r18, Y+2	; 0x02
    326e:	3b 81       	ldd	r19, Y+3	; 0x03
    3270:	22 30       	cpi	r18, 0x02	; 2
    3272:	31 05       	cpc	r19, r1
    3274:	59 f1       	breq	.+86     	; 0x32cc <TIMER_deInit+0x82>
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	9b 81       	ldd	r25, Y+3	; 0x03
    327a:	00 97       	sbiw	r24, 0x00	; 0
    327c:	b9 f5       	brne	.+110    	; 0x32ec <TIMER_deInit+0xa2>
	{
	case TIMER0:
		TIMSK &= ~0X03; /* Disable All TIMER0 interrupt */
    327e:	a9 e5       	ldi	r26, 0x59	; 89
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	e9 e5       	ldi	r30, 0x59	; 89
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	80 81       	ld	r24, Z
    3288:	8c 7f       	andi	r24, 0xFC	; 252
    328a:	8c 93       	st	X, r24
		TCNT0=0;        /* Disable timer0 */
    328c:	e2 e5       	ldi	r30, 0x52	; 82
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	10 82       	st	Z, r1
		TCCR0=0;        /* Clear Counter*/
    3292:	e3 e5       	ldi	r30, 0x53	; 83
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	10 82       	st	Z, r1
		OCR0=0;         /*Clear Compare Register*/
    3298:	ec e5       	ldi	r30, 0x5C	; 92
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	10 82       	st	Z, r1
    329e:	26 c0       	rjmp	.+76     	; 0x32ec <TIMER_deInit+0xa2>
		break;
	case TIMER1:
		TIMSK &= ~0X1C; /*Disable All TIMER1 Interrupt */
    32a0:	a9 e5       	ldi	r26, 0x59	; 89
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	e9 e5       	ldi	r30, 0x59	; 89
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	83 7e       	andi	r24, 0xE3	; 227
    32ac:	8c 93       	st	X, r24
		TCCR1A=0;       /* Disable Timer1 */
    32ae:	ef e4       	ldi	r30, 0x4F	; 79
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	10 82       	st	Z, r1
		TCCR1B=0;
    32b4:	ee e4       	ldi	r30, 0x4E	; 78
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	10 82       	st	Z, r1
		TCNT1=0;        /* Clear Counter*/
    32ba:	ec e4       	ldi	r30, 0x4C	; 76
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	11 82       	std	Z+1, r1	; 0x01
    32c0:	10 82       	st	Z, r1
		OCR1A=0;        /*Clear Compare Register*/
    32c2:	ea e4       	ldi	r30, 0x4A	; 74
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	11 82       	std	Z+1, r1	; 0x01
    32c8:	10 82       	st	Z, r1
    32ca:	10 c0       	rjmp	.+32     	; 0x32ec <TIMER_deInit+0xa2>

		break;
	case TIMER2:
		TIMSK &= ~0XC0; /* Disable All TIMER2 interrupt */
    32cc:	a9 e5       	ldi	r26, 0x59	; 89
    32ce:	b0 e0       	ldi	r27, 0x00	; 0
    32d0:	e9 e5       	ldi	r30, 0x59	; 89
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	8f 73       	andi	r24, 0x3F	; 63
    32d8:	8c 93       	st	X, r24
		TCNT2=0;        /* Disable TIMER2 */
    32da:	e4 e4       	ldi	r30, 0x44	; 68
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	10 82       	st	Z, r1
		TCCR2=0;        /* Clear Counter*/
    32e0:	e5 e4       	ldi	r30, 0x45	; 69
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	10 82       	st	Z, r1
		OCR0=0;         /*Clear Compare Register*/
    32e6:	ec e5       	ldi	r30, 0x5C	; 92
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	10 82       	st	Z, r1
		break;
	}
}
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	cf 91       	pop	r28
    32f4:	df 91       	pop	r29
    32f6:	08 95       	ret

000032f8 <UART_init>:

/******************************************************************
 *                                 Functions Definitions          *
 ******************************************************************/
void UART_init(void)
{
    32f8:	df 93       	push	r29
    32fa:	cf 93       	push	r28
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
	/* U2X is set for Double Transmission */
	UCSRA |= 0X02;
    3300:	ab e2       	ldi	r26, 0x2B	; 43
    3302:	b0 e0       	ldi	r27, 0x00	; 0
    3304:	eb e2       	ldi	r30, 0x2B	; 43
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	80 81       	ld	r24, Z
    330a:	82 60       	ori	r24, 0x02	; 2
    330c:	8c 93       	st	X, r24
	 * TXEN =1   Transmitter Enable
	 * UCSZ2 = 0 8-Bits Data (shared with UCSZ 1:0 in UCSRC Reg
	 * RXB8  Receive bit 8 (the 9th bit if the data is 9-bit)
	 * TXB8  Transmit bit 8 (the 9th bit if the data is 9-bit)
	 */
	UCSRB |= 0X18; /* Bit 4 and 3 */
    330e:	aa e2       	ldi	r26, 0x2A	; 42
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	ea e2       	ldi	r30, 0x2A	; 42
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	80 81       	ld	r24, Z
    3318:	88 61       	ori	r24, 0x18	; 24
    331a:	8c 93       	st	X, r24
	 * UPM1:0 =00 Disable Parity
	 * USBS =0 (1) STOP Bit
	 * UCSZ1:0 =11 For 8bit Character size
	 * UCPOL =0 (Used with Synchronous Mode)
	 */
	UCSRC |= 0X86;
    331c:	a0 e4       	ldi	r26, 0x40	; 64
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	e0 e4       	ldi	r30, 0x40	; 64
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	80 81       	ld	r24, Z
    3326:	86 68       	ori	r24, 0x86	; 134
    3328:	8c 93       	st	X, r24

	/* Baud Rate 9600 at 1 MHz CPU clock and Double data rate */

	UBRRH = (BAUD_PRESCALER>>8);
    332a:	e0 e4       	ldi	r30, 0x40	; 64
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALER;
    3330:	e9 e2       	ldi	r30, 0x29	; 41
    3332:	f0 e0       	ldi	r31, 0x00	; 0
    3334:	87 e6       	ldi	r24, 0x67	; 103
    3336:	80 83       	st	Z, r24
}
    3338:	cf 91       	pop	r28
    333a:	df 91       	pop	r29
    333c:	08 95       	ret

0000333e <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    333e:	df 93       	push	r29
    3340:	cf 93       	push	r28
    3342:	0f 92       	push	r0
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	89 83       	std	Y+1, r24	; 0x01
	/* UDR data register is empty and ready to receive data
	 * when TXC or UDRE flag is SET (1)
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    334a:	eb e2       	ldi	r30, 0x2B	; 43
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	88 2f       	mov	r24, r24
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	80 72       	andi	r24, 0x20	; 32
    3356:	90 70       	andi	r25, 0x00	; 0
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	b9 f3       	breq	.-18     	; 0x334a <UART_sendByte+0xc>
	/* Put Data in UDR Register it also clear the flag */
	UDR=data;
    335c:	ec e2       	ldi	r30, 0x2C	; 44
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	80 83       	st	Z, r24
}
    3364:	0f 90       	pop	r0
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	08 95       	ret

0000336c <UART_receiveByte>:

uint8 UART_receiveByte(void)
{
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
	/* Wait until the data is received and
	 * RXC Flag is set
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    3374:	eb e2       	ldi	r30, 0x2B	; 43
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	80 81       	ld	r24, Z
    337a:	88 23       	and	r24, r24
    337c:	dc f7       	brge	.-10     	; 0x3374 <UART_receiveByte+0x8>
	/* Read data in UDR the flag will be Cleared */
	return UDR;
    337e:	ec e2       	ldi	r30, 0x2C	; 44
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
}
    3384:	cf 91       	pop	r28
    3386:	df 91       	pop	r29
    3388:	08 95       	ret

0000338a <UART_sendString>:


void UART_sendString(const uint8 *str)
{
    338a:	df 93       	push	r29
    338c:	cf 93       	push	r28
    338e:	00 d0       	rcall	.+0      	; 0x3390 <UART_sendString+0x6>
    3390:	0f 92       	push	r0
    3392:	cd b7       	in	r28, 0x3d	; 61
    3394:	de b7       	in	r29, 0x3e	; 62
    3396:	9b 83       	std	Y+3, r25	; 0x03
    3398:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    339a:	19 82       	std	Y+1, r1	; 0x01
    339c:	0e c0       	rjmp	.+28     	; 0x33ba <UART_sendString+0x30>
	while(str[i]!='\0')
	{
		UART_sendByte(str[i]);
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	28 2f       	mov	r18, r24
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	8a 81       	ldd	r24, Y+2	; 0x02
    33a6:	9b 81       	ldd	r25, Y+3	; 0x03
    33a8:	fc 01       	movw	r30, r24
    33aa:	e2 0f       	add	r30, r18
    33ac:	f3 1f       	adc	r31, r19
    33ae:	80 81       	ld	r24, Z
    33b0:	0e 94 9f 19 	call	0x333e	; 0x333e <UART_sendByte>
		i++;
    33b4:	89 81       	ldd	r24, Y+1	; 0x01
    33b6:	8f 5f       	subi	r24, 0xFF	; 255
    33b8:	89 83       	std	Y+1, r24	; 0x01


void UART_sendString(const uint8 *str)
{
	uint8 i=0;
	while(str[i]!='\0')
    33ba:	89 81       	ldd	r24, Y+1	; 0x01
    33bc:	28 2f       	mov	r18, r24
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	9b 81       	ldd	r25, Y+3	; 0x03
    33c4:	fc 01       	movw	r30, r24
    33c6:	e2 0f       	add	r30, r18
    33c8:	f3 1f       	adc	r31, r19
    33ca:	80 81       	ld	r24, Z
    33cc:	88 23       	and	r24, r24
    33ce:	39 f7       	brne	.-50     	; 0x339e <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    33d0:	0f 90       	pop	r0
    33d2:	0f 90       	pop	r0
    33d4:	0f 90       	pop	r0
    33d6:	cf 91       	pop	r28
    33d8:	df 91       	pop	r29
    33da:	08 95       	ret

000033dc <UART_receiveString>:

void UART_receiveString(uint8 *str)
{
    33dc:	0f 93       	push	r16
    33de:	1f 93       	push	r17
    33e0:	df 93       	push	r29
    33e2:	cf 93       	push	r28
    33e4:	00 d0       	rcall	.+0      	; 0x33e6 <UART_receiveString+0xa>
    33e6:	0f 92       	push	r0
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	9b 83       	std	Y+3, r25	; 0x03
    33ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    33f0:	19 82       	std	Y+1, r1	; 0x01
	do
	{
		str[i]=UART_receiveByte();
    33f2:	89 81       	ldd	r24, Y+1	; 0x01
    33f4:	28 2f       	mov	r18, r24
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	8a 81       	ldd	r24, Y+2	; 0x02
    33fa:	9b 81       	ldd	r25, Y+3	; 0x03
    33fc:	8c 01       	movw	r16, r24
    33fe:	02 0f       	add	r16, r18
    3400:	13 1f       	adc	r17, r19
    3402:	0e 94 b6 19 	call	0x336c	; 0x336c <UART_receiveByte>
    3406:	f8 01       	movw	r30, r16
    3408:	80 83       	st	Z, r24
		i++;
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	8f 5f       	subi	r24, 0xFF	; 255
    340e:	89 83       	std	Y+1, r24	; 0x01
	}while(str[i-1] != '#');
    3410:	89 81       	ldd	r24, Y+1	; 0x01
    3412:	88 2f       	mov	r24, r24
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	9c 01       	movw	r18, r24
    3418:	21 50       	subi	r18, 0x01	; 1
    341a:	30 40       	sbci	r19, 0x00	; 0
    341c:	8a 81       	ldd	r24, Y+2	; 0x02
    341e:	9b 81       	ldd	r25, Y+3	; 0x03
    3420:	fc 01       	movw	r30, r24
    3422:	e2 0f       	add	r30, r18
    3424:	f3 1f       	adc	r31, r19
    3426:	80 81       	ld	r24, Z
    3428:	83 32       	cpi	r24, 0x23	; 35
    342a:	19 f7       	brne	.-58     	; 0x33f2 <UART_receiveString+0x16>
	str[i-1]='\0'; /* Replace # with NULL character */
    342c:	89 81       	ldd	r24, Y+1	; 0x01
    342e:	88 2f       	mov	r24, r24
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	9c 01       	movw	r18, r24
    3434:	21 50       	subi	r18, 0x01	; 1
    3436:	30 40       	sbci	r19, 0x00	; 0
    3438:	8a 81       	ldd	r24, Y+2	; 0x02
    343a:	9b 81       	ldd	r25, Y+3	; 0x03
    343c:	fc 01       	movw	r30, r24
    343e:	e2 0f       	add	r30, r18
    3440:	f3 1f       	adc	r31, r19
    3442:	10 82       	st	Z, r1
}
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	1f 91       	pop	r17
    3450:	0f 91       	pop	r16
    3452:	08 95       	ret

00003454 <__mulsi3>:
    3454:	62 9f       	mul	r22, r18
    3456:	d0 01       	movw	r26, r0
    3458:	73 9f       	mul	r23, r19
    345a:	f0 01       	movw	r30, r0
    345c:	82 9f       	mul	r24, r18
    345e:	e0 0d       	add	r30, r0
    3460:	f1 1d       	adc	r31, r1
    3462:	64 9f       	mul	r22, r20
    3464:	e0 0d       	add	r30, r0
    3466:	f1 1d       	adc	r31, r1
    3468:	92 9f       	mul	r25, r18
    346a:	f0 0d       	add	r31, r0
    346c:	83 9f       	mul	r24, r19
    346e:	f0 0d       	add	r31, r0
    3470:	74 9f       	mul	r23, r20
    3472:	f0 0d       	add	r31, r0
    3474:	65 9f       	mul	r22, r21
    3476:	f0 0d       	add	r31, r0
    3478:	99 27       	eor	r25, r25
    347a:	72 9f       	mul	r23, r18
    347c:	b0 0d       	add	r27, r0
    347e:	e1 1d       	adc	r30, r1
    3480:	f9 1f       	adc	r31, r25
    3482:	63 9f       	mul	r22, r19
    3484:	b0 0d       	add	r27, r0
    3486:	e1 1d       	adc	r30, r1
    3488:	f9 1f       	adc	r31, r25
    348a:	bd 01       	movw	r22, r26
    348c:	cf 01       	movw	r24, r30
    348e:	11 24       	eor	r1, r1
    3490:	08 95       	ret

00003492 <__prologue_saves__>:
    3492:	2f 92       	push	r2
    3494:	3f 92       	push	r3
    3496:	4f 92       	push	r4
    3498:	5f 92       	push	r5
    349a:	6f 92       	push	r6
    349c:	7f 92       	push	r7
    349e:	8f 92       	push	r8
    34a0:	9f 92       	push	r9
    34a2:	af 92       	push	r10
    34a4:	bf 92       	push	r11
    34a6:	cf 92       	push	r12
    34a8:	df 92       	push	r13
    34aa:	ef 92       	push	r14
    34ac:	ff 92       	push	r15
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	ca 1b       	sub	r28, r26
    34bc:	db 0b       	sbc	r29, r27
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	f8 94       	cli
    34c2:	de bf       	out	0x3e, r29	; 62
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	cd bf       	out	0x3d, r28	; 61
    34c8:	09 94       	ijmp

000034ca <__epilogue_restores__>:
    34ca:	2a 88       	ldd	r2, Y+18	; 0x12
    34cc:	39 88       	ldd	r3, Y+17	; 0x11
    34ce:	48 88       	ldd	r4, Y+16	; 0x10
    34d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    34d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    34d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    34d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    34d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    34da:	aa 84       	ldd	r10, Y+10	; 0x0a
    34dc:	b9 84       	ldd	r11, Y+9	; 0x09
    34de:	c8 84       	ldd	r12, Y+8	; 0x08
    34e0:	df 80       	ldd	r13, Y+7	; 0x07
    34e2:	ee 80       	ldd	r14, Y+6	; 0x06
    34e4:	fd 80       	ldd	r15, Y+5	; 0x05
    34e6:	0c 81       	ldd	r16, Y+4	; 0x04
    34e8:	1b 81       	ldd	r17, Y+3	; 0x03
    34ea:	aa 81       	ldd	r26, Y+2	; 0x02
    34ec:	b9 81       	ldd	r27, Y+1	; 0x01
    34ee:	ce 0f       	add	r28, r30
    34f0:	d1 1d       	adc	r29, r1
    34f2:	0f b6       	in	r0, 0x3f	; 63
    34f4:	f8 94       	cli
    34f6:	de bf       	out	0x3e, r29	; 62
    34f8:	0f be       	out	0x3f, r0	; 63
    34fa:	cd bf       	out	0x3d, r28	; 61
    34fc:	ed 01       	movw	r28, r26
    34fe:	08 95       	ret

00003500 <itoa>:
    3500:	fb 01       	movw	r30, r22
    3502:	9f 01       	movw	r18, r30
    3504:	e8 94       	clt
    3506:	42 30       	cpi	r20, 0x02	; 2
    3508:	c4 f0       	brlt	.+48     	; 0x353a <itoa+0x3a>
    350a:	45 32       	cpi	r20, 0x25	; 37
    350c:	b4 f4       	brge	.+44     	; 0x353a <itoa+0x3a>
    350e:	4a 30       	cpi	r20, 0x0A	; 10
    3510:	29 f4       	brne	.+10     	; 0x351c <itoa+0x1c>
    3512:	97 fb       	bst	r25, 7
    3514:	1e f4       	brtc	.+6      	; 0x351c <itoa+0x1c>
    3516:	90 95       	com	r25
    3518:	81 95       	neg	r24
    351a:	9f 4f       	sbci	r25, 0xFF	; 255
    351c:	64 2f       	mov	r22, r20
    351e:	77 27       	eor	r23, r23
    3520:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__udivmodhi4>
    3524:	80 5d       	subi	r24, 0xD0	; 208
    3526:	8a 33       	cpi	r24, 0x3A	; 58
    3528:	0c f0       	brlt	.+2      	; 0x352c <itoa+0x2c>
    352a:	89 5d       	subi	r24, 0xD9	; 217
    352c:	81 93       	st	Z+, r24
    352e:	cb 01       	movw	r24, r22
    3530:	00 97       	sbiw	r24, 0x00	; 0
    3532:	a1 f7       	brne	.-24     	; 0x351c <itoa+0x1c>
    3534:	16 f4       	brtc	.+4      	; 0x353a <itoa+0x3a>
    3536:	5d e2       	ldi	r21, 0x2D	; 45
    3538:	51 93       	st	Z+, r21
    353a:	10 82       	st	Z, r1
    353c:	c9 01       	movw	r24, r18
    353e:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <strrev>

00003542 <strrev>:
    3542:	dc 01       	movw	r26, r24
    3544:	fc 01       	movw	r30, r24
    3546:	67 2f       	mov	r22, r23
    3548:	71 91       	ld	r23, Z+
    354a:	77 23       	and	r23, r23
    354c:	e1 f7       	brne	.-8      	; 0x3546 <strrev+0x4>
    354e:	32 97       	sbiw	r30, 0x02	; 2
    3550:	04 c0       	rjmp	.+8      	; 0x355a <strrev+0x18>
    3552:	7c 91       	ld	r23, X
    3554:	6d 93       	st	X+, r22
    3556:	70 83       	st	Z, r23
    3558:	62 91       	ld	r22, -Z
    355a:	ae 17       	cp	r26, r30
    355c:	bf 07       	cpc	r27, r31
    355e:	c8 f3       	brcs	.-14     	; 0x3552 <strrev+0x10>
    3560:	08 95       	ret

00003562 <__udivmodhi4>:
    3562:	aa 1b       	sub	r26, r26
    3564:	bb 1b       	sub	r27, r27
    3566:	51 e1       	ldi	r21, 0x11	; 17
    3568:	07 c0       	rjmp	.+14     	; 0x3578 <__udivmodhi4_ep>

0000356a <__udivmodhi4_loop>:
    356a:	aa 1f       	adc	r26, r26
    356c:	bb 1f       	adc	r27, r27
    356e:	a6 17       	cp	r26, r22
    3570:	b7 07       	cpc	r27, r23
    3572:	10 f0       	brcs	.+4      	; 0x3578 <__udivmodhi4_ep>
    3574:	a6 1b       	sub	r26, r22
    3576:	b7 0b       	sbc	r27, r23

00003578 <__udivmodhi4_ep>:
    3578:	88 1f       	adc	r24, r24
    357a:	99 1f       	adc	r25, r25
    357c:	5a 95       	dec	r21
    357e:	a9 f7       	brne	.-22     	; 0x356a <__udivmodhi4_loop>
    3580:	80 95       	com	r24
    3582:	90 95       	com	r25
    3584:	bc 01       	movw	r22, r24
    3586:	cd 01       	movw	r24, r26
    3588:	08 95       	ret

0000358a <_exit>:
    358a:	f8 94       	cli

0000358c <__stop_program>:
    358c:	ff cf       	rjmp	.-2      	; 0x358c <__stop_program>
